<!--
/*******************************************************************************
 * 
 * This file is part of BAIPROJECT.
 * 
 * BAIPROJECT is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * only, as published by the Free Software Foundation.
 * 
 * BAIPROJECT is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU Affero General Public License
 * version 3 along with BAIPROJECT.  If not, see <http://www.gnu.org/licenses/>
 * for a copy of the AGPLv3 License.
 * 
 *******************************************************************************/

/*******************************************************************************
 *
 * File Name: GIArules.xml
 * Author: Richard Bruce Baxter - Copyright (c) 2005-2014 Baxter AI (baxterai.com)
 * Project: General Intelligence Algorithm
 * Project Version: 2h1a 14-November-2014
 *
 *******************************************************************************/
-->
<rules>
	<sprite>		
		<miscellaneousItem name="SPRITE_SUBMODEL_RANGE_SCALE_FACTOR" stringValue="" fractionalValue="1.0" />
		
		<miscellaneousItem name="SPRITE_TEXT_SCALE_FACTOR" stringValue="" fractionalValue="0.5" />
		<miscellaneousItem name="SPRITE_WIDTH_OF_CHARS_IN_LDRAW_UNITS" stringValue="" fractionalValue="10" />
		<miscellaneousItem name="SPRITE_HEIGHT_OF_CHARS_IN_LDRAW_UNITS" stringValue="" fractionalValue="15" />
		<miscellaneousItem name="SPRITE_CHAR_SPACING_RATIO" stringValue="" fractionalValue="0.7" />
		<miscellaneousItem name="SPRITE_TEXT_PADDING_IN_LDRAW_UNITS" stringValue="" fractionalValue="1.0" />
		
		<miscellaneousItem name="SPRITES_FLOATING_WIDTH_IN_LDRAW_UNITS" stringValue="" fractionalValue="0" />
		<miscellaneousItem name="SPRITES_FLOATING_HEIGHT_IN_LDRAW_UNITS" stringValue="" fractionalValue="-5" />
		
		<miscellaneousItem name="SPRITE_NAME_START" stringValue="sprite" fractionalValue="" />
		<miscellaneousItem name="SPRITE_EXTENSION" stringValue=".ldr" fractionalValue="" />
		<miscellaneousItem name="SPRITE_CHARACTER_START" stringValue="spritetext" fractionalValue="" />
		<miscellaneousItem name="SPRITE_CHARACTER_EXTENSION" stringValue=".dat" fractionalValue="" />
				
	</sprite>
	<draw>
		<miscellaneousItem name="GIA_OUTPUT_Z_POSITION_FILE_CONNECTIONS" stringValue="" fractionalValue="0.6" />
		<miscellaneousItem name="GIA_OUTPUT_Z_POSITION_FILE_CONTAINER_BIG_BOX" stringValue="" fractionalValue="0.5" />
		<miscellaneousItem name="GIA_OUTPUT_Z_POSITION_FUNCTION_CONNECTIONS" stringValue="" fractionalValue="0.4" />
		<miscellaneousItem name="GIA_OUTPUT_Z_POSITION_FILE_AND_FUNCTION_BOX" stringValue="" fractionalValue="0.3" />
		<miscellaneousItem name="GIA_OUTPUT_Z_POSITION_FILE_AND_FUNCTION_TEXT" stringValue="" fractionalValue="0.2" />
		
		<miscellaneousItem name="GIA_FILE_OR_FUNCTION_TEXT_BOX_SCALE_FACTOR_X" stringValue="" fractionalValue="0.4" />
		<miscellaneousItem name="GIA_FILE_OR_FUNCTION_TEXT_BOX_BOX_SCALE_FACTOR_Y_LDR" stringValue="" fractionalValue="0.05" />
		<miscellaneousItem name="GIA_FILE_OR_FUNCTION_TEXT_BOX_TEXT_SCALE_FACTOR_Y_SVG" stringValue="" fractionalValue="0.03" />
		<miscellaneousItem name="GIA_FILE_OR_FUNCTION_TEXT_BOX_TEXT_SCALE_FACTOR_Y_SVG_B" stringValue="" fractionalValue="0.067" />
		<miscellaneousItem name="GIA_FILE_OR_FUNCTION_TEXT_BOX_BOX_SCALE_FACTOR_X_SPACING_FRACTION_SVG" stringValue="" fractionalValue="0.8" />
		<miscellaneousItem name="GIA_FILE_OR_FUNCTION_TEXT_BOX_BOX_SCALE_FACTOR_Y_SPACING_FRACTION_SVG" stringValue="" fractionalValue="0.1" />
		
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_DISABLED_VECTOROBJECTS_SCALE_FACTOR" stringValue="" fractionalValue="500" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_VECTOROBJECTS_SCALE_FACTOR" stringValue="" fractionalValue="200" />
		<miscellaneousItem name="GIA_FILE_MAX_TEXT_LENGTH" stringValue="" fractionalValue="20" />
		<miscellaneousItem name="GIA_FILE_TEXT_BOX_PADDING_FRACTION_OF_TEXT_LENGTH" stringValue="" fractionalValue="1.25" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_DISABLED_TEXT_BOX_SCALE_FACTOR_X_SPACING_FRACTION" stringValue="" fractionalValue="0.9" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_DISABLED_TEXT_BOX_SCALE_FACTOR_Y_SPACING_FRACTION" stringValue="" fractionalValue="0.3" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_TEXT_BOX_SCALE_FACTOR_X_SPACING_FRACTION" stringValue="" fractionalValue="0.7" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_TEXT_BOX_SCALE_FACTOR_Y_SPACING_FRACTION" stringValue="" fractionalValue="1.0" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_LARGE_BOX_SCALE_FACTOR_X" stringValue="" fractionalValue="5.0" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_LARGE_BOX_SCALE_FACTOR_X_SPACING_FRACTION_B" stringValue="" fractionalValue="0.65" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_LARGE_BOX_SCALE_FACTOR_Y_SPACING_FRACTION_B" stringValue="" fractionalValue="0.9" />
		<miscellaneousItem name="GIA_FILE_FUNCTIONS_ENABLED_LARGE_BOX_SCALE_FACTOR_Y_SPACING_FRACTION_C" stringValue="" fractionalValue="0.4" />
		<miscellaneousItem name="GIA_FILE_TEXT_BOX_OUTLINE_WIDTH_SVG" stringValue="" fractionalValue="1.0" />
		
		<miscellaneousItem name="GIA_FUNCTION_VECTOROBJECTS_SCALE_FACTOR" stringValue="" fractionalValue="50" />
		<miscellaneousItem name="GIA_FUNCTION_MAX_TEXT_LENGTH" stringValue="" fractionalValue="25" />
		<miscellaneousItem name="GIA_FUNCTION_TEXT_BOX_PADDING_FRACTION_OF_TEXT_LENGTH" stringValue="" fractionalValue="1.00" />
		<miscellaneousItem name="GIA_FUNCTION_TEXT_BOX_SCALE_FACTOR_Y_SPACING_FRACTION" stringValue="" fractionalValue="0.7" />
		<miscellaneousItem name="GIA_FUNCTION_TEXT_BOX_OUTLINE_WIDTH_SVG" stringValue="" fractionalValue="0.3" />
		
		<miscellaneousItem name="GIA_BASIC_ENTITY_NODE_COLOUR" stringValue="" fractionalValue="6" />
		<miscellaneousItem name="GIA_PROPERTY_NODE_COLOUR" stringValue="" fractionalValue="1" />
		<miscellaneousItem name="GIA_ACTION_NODE_COLOUR" stringValue="" fractionalValue="2" />
		<miscellaneousItem name="GIA_CONDITION_NODE_COLOUR" stringValue="" fractionalValue="3" />
		
	
		<!--not used... -->
	
		<miscellaneousItem name="GIA_LAYER_4_COLOUR" stringValue="" fractionalValue="4" />
		<miscellaneousItem name="GIA_LAYER_5_COLOUR" stringValue="" fractionalValue="22" />
		<miscellaneousItem name="GIA_LAYER_6_COLOUR" stringValue="" fractionalValue="25" />
		<miscellaneousItem name="GIA_LAYER_7_COLOUR" stringValue="" fractionalValue="14" />
		<miscellaneousItem name="GIA_LAYER_8_COLOUR" stringValue="" fractionalValue="5" />
		<miscellaneousItem name="GIA_LAYER_9_COLOUR" stringValue="" fractionalValue="7" />
		<miscellaneousItem name="GIA_LAYER_10_COLOUR" stringValue="" fractionalValue="8" />
		<miscellaneousItem name="GIA_LAYER_11_COLOUR" stringValue="" fractionalValue="0" />
		<miscellaneousItem name="GIA_LAYER_12_COLOUR" stringValue="" fractionalValue="15" />
		
		<miscellaneousItem name="GIA_ENTITY_CONNECTION_HIGHLIGHT_COLOUR" stringValue="" fractionalValue="5" />
		<miscellaneousItem name="GIA_ENTITY_BOX_HIGHLIGHT_COLOUR" stringValue="" fractionalValue="5" />
		
	</draw>
	<translator>
		<file name="GIAtranslatorRedistributeStanfordRelations">
			<function name="disableRedundantNodesStanfordCoreNLP">
				<!-- eliminate all redundant date relations eg num(December-4, 3rd-5)/num(December-4, 1990-7)/nn(3rd-5, December-4)/appos(3rd-5, 1990-7), where both the governer and the dependent have NER tag set to DATE -->
				<example><!--Also: Ms. Savata's hand slipped.
        			  <dep type="nn">
        			    <governor idx="2">Savata</governor>
        			    <dependent idx="1">Ms.</dependent>
        			  </dep>
				--></example>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" relationArrayTestIsNegative="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="NERTemp" value="0" negative="true" REL="1" REL_ENT="1" />
				<option useSpecialCaseCharacteristicsRelationIndexTest="true" REL="1" REL_ENT="1" specialCaseCharacteristicsRelationIndexTestRelationID="1" specialCaseCharacteristicsRelationIndexTestEntityID="2" specialCaseCharacteristicsRelationIndexTest="NERTemp" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="5" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="6" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="7" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="8" REL="1" REL_ENT="1" />
				<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_5C_FEATURES_STANFORD_NER_INDICATES_NAME_CONCATENATION_REQUIRES_POS_NNP -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="stanfordPOStemp" value="NNP" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="stanfordPOStemp" value="NNP" REL="1" REL_ENT="1" />
				<!-- #endif -->
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="1" REL_ENT="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="1" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="2" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="1" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>

				<!-- #ifdefGIA_STANFORD_CORE_NLP_VERSION_2013_04_04_OR_GREATER -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" relationArrayTestIsNegative="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="NERTemp" value="5" REL="1" REL_ENT="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_nn" />
				<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_5C_FEATURES_STANFORD_NER_INDICATES_NAME_CONCATENATION_REQUIRES_POS_NNP -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="stanfordPOStemp" value="NNP" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="stanfordPOStemp" value="NNP" REL="1" REL_ENT="1" />
				<!-- #endif -->
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="1" REL_ENT="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="1" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="2" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="1" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>
				<!-- #endif -->

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" relationArrayTestIsNegative="true" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="1" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="5" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="6" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="7" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="NERTemp" value="8" REL="1" REL_ENT="1" />
				<option useSpecialCaseCharacteristicsRelationIndexTest="true" REL="1" REL_ENT="1" specialCaseCharacteristicsRelationIndexTestRelationID="1" specialCaseCharacteristicsRelationIndexTestEntityID="2" specialCaseCharacteristicsRelationIndexTest="NERTemp" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>

				<!-- #ifdefGIA_STANFORD_CORE_NLP_VERSION_2013_04_04_OR_GREATER -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" relationArrayTestIsNegative="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="NERTemp" value="5" REL="1" REL_ENT="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_nn" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>
				<!-- #endif -->
			</function>

			<function name="disableRedundantNodesStanfordParser">
				<example><!--
				ONLY USED FOR OLD VERSION OF STANFORD PARSER/CORENLP? note the following example no longer generates a complm dependency relation...
				eliminate redundant complementizer 'that' nodes eg 'The authors believe that their method can identify the time at which a subject becomes aware of her own movement.' / _complm(identify[8], that[4])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_complm" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="that" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsCreateQueryVarsAdjustForActionPrepositionAction">
				<!-- opt1a -->
				<example><!--
				What is yarn used in the making of?
				dobj(used-4, What-1)
				auxpass(used-4, is-2)
				nsubjpass(used-4, yarn-3)
				root(ROOT-0, used-4)
				det(making-7, the-6)
				prep_in(used-4, making-7)
				prep(making-7, of-8)
				/
				_obj(making[7], what[1])
				_obj(use[4], yarn[3])
				prep_in(use[4], making[7])
				_prep(making[7], of[8])

				prep_in(use[4], making[7]) + _obj(used[4], what[1]) + _prep(making[7], of[8]) -> prep_of(making[7], what[1])
				--></example>
				<paramDepRel mode="redistribute">
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="2" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="who|what|how|where|when|why|which|is" relationArrayTestSize="8" />
				<option expectToFindPrepositionTest="true" REL="1" /> <!-- added 24 July 2013 -->
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_prep" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="3" relationIndexTestRelationID="1" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>

				<!-- opt1b -->
				<example><!--
				What is the cart designed to integrate with?
				dep(designed-5, What-1)
				auxpass(designed-5, is-2)
				det(cart-4, the-3)
				nsubjpass(designed-5, cart-4)
				xsubj(integrate-7, cart-4)
				root(ROOT-0, designed-5)
				aux(integrate-7, to-6)
				xcomp(designed-5, integrate-7)
				prep(integrate-7, with-8)
				xcomp(designed-5, integrate-7) + dep(designed, what) + prep(integrate-7, with-8) -> prep_with(integrate[7], what[1])
				--></example>
				<paramDepRel mode="redistribute">
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="2" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="who|what|how|where|when|why|which|is" relationArrayTestSize="8" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_prep" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="3" relationIndexTestRelationID="1" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>

				<!-- opt1c -->
				<example><!--
				x(y, _$qVar[1]) + prep_q(y, a) -> x(a, _$qVar[1])
				eg1;
					Apples is used for making juice.
					What is apples used for making?
					dobj(used-4, What-1)
					auxpass(used-4, is-2)
					nsubjpass(used-4, apples-3)
					root(ROOT-0, used-4)
					prepc_for(used-4, making-6)
					/
					_obj(use[4], _$qVar[1])
					_obj(use[4], apple[3])
					prepc_for(use[4], make[6])
					NO [this solution is not universal]: dobj(used-4, What-1) + prepc_for(used-4, making-6) -> dobj(making-6, What-1)
					_obj(use[4], _$qVar[1]) + prepc_for(use[4], make[6]) -> _obj(make[6], _$qVar[1])
				eg 2;
					Apples are used for eating in the forest.
					Where are apples used for eating?
					advmod(used-4, Where-1)
					auxpass(used-4, are-2)
					nsubjpass(used-4, apples-3)
					root(ROOT-0, used-4)
					prepc_for(used-4, eating-6)
					/
					_%atLocation(use[4], _$qVar[1])
					_obj(use[4], apple[3])
					prepc_for(use[4], eat[6])
					_%atLocation(use[4], _$qVar[1]) + prepc_for(use[4], eat[6]) -> _%atLocation(eat[6], _$qVar[1])
				--></example>
				<paramDepRel mode="redistribute">
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="2" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="who|what|how|where|when|why|which|is" relationArrayTestSize="8" />
				<option expectToFindPrepositionTest="true" REL="1" />
				<option numberOfRelations="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>

				<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_DEP_AND_PREP_AND_XCOMP -->
				<!-- opt2a -->
				<example><!--
				What is the Co-cart designed to do?
				interpret; _to-do(design[5], do[7]) + _dep(design[5], what[1]) -> _to-do(design[5], do[7]) + _dep(design[5], do[7]) [see 2c] -> _to-do(design[5], what[1]) [2a]
				--></example>
				<paramDepRel mode="redistribute">
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="2" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="who|what|how|where|when|why|which|is" relationArrayTestSize="8" />
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="do" />
				<option disableEntity="true" REL="1" REL_ENT="2" disableEntityUseOriginalValues="true" />
				<option disableRelation="true" REL="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>

				<!-- opt2b -->
				<example><!--
				eg
				What is yarn used to make?
				dep(used-4, What-1)
				auxpass(used-4, is-2)
				nsubjpass(used-4, yarn-3)
				xsubj(make-6, yarn-3)
				root(ROOT-0, used-4)
				aux(make-6, to-5)
				xcomp(used-4, make-6)
				interpret; _to-do(used-4, make-6) + dep(used-4, What-1) -> _to-do(used-4, make-6) + dep(make-6, What-1) [see 2c] -> _to-do(used-4, make-6) + obj(make-6, What-1) [2b]
				--></example>
				<paramDepRel mode="redistribute">
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="2" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="who|what|how|where|when|why|which|is" relationArrayTestSize="8" />
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				</paramDepRel>

				<!-- opt2c -->
				<paramDepRel mode="redistribute">
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="2" relationIndexTestEntityID="3" relationIndexTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="who|what|how|where|when|why|which|is" relationArrayTestSize="8" />
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
				<!-- #endif -->
			</function>

			<!-- NLC Only -->
			<!-- #ifdefGIA_USE_NON_STANDARD_CONDITION_CONDITION_CONNECTIONS_CONNECT_CONJUNCTIONS_TO_THEIR_RELEVANT_PREPOSITIONS -->
			<function name="redistributeStanfordRelationsConjunctionAndSubjectAndPreposition">
				
				<example><!--
				eg1 If the basket is near the house and is red, the dog is happy.
					conj_and(is-4, red-10) + nsubj(is-4, basket-3) + prep_near(is-4, house-7) -> conj_and(near-x, red-10)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option expectToFindPrepositionTest="true" REL="3" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="3" />
				</paramDepRel>
				
				<example><!--
				eg2 If the basket is red and is near the house, the dog is happy.
					conj_and(red-5, is-7) + nsubj(is-7, basket-3) + prep_near(is-7, house-10) -> conj_and(red-5, near-x)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option expectToFindPrepositionTest="true" REL="3" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="be" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="3" />
				</paramDepRel>
				
				<example><!--
				eg3 If the basket is near the house and is above the tray, the dog is happy.
					conj_and(is-4, is-9) + nsubj(is-4, basket-3) + nsubj(is-9, basket-3) + prep_near(is-4, house-7) + prep_above(is-9, tray-12) -> conj_and(near-x, above-y)
				--></example>
				<!-- REDUNDANT (achieved by eg1 and eg2 combined):
				<option numberOfRelations="5" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_subj" />
				<option expectToFindPrepositionTest="true" REL="4" />
				<option expectToFindPrepositionTest="true" REL="5" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="be" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRelationIndexTest="true" REL="4" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="5" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option parseDisabledRelation="true" REL="2" />
				<option parseDisabledRelation="true" REL="3" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="4" redistributeRelationEntityIndexReassignmentRelationEntityID="3" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="5" redistributeRelationEntityIndexReassignmentRelationEntityID="3" />
				</paramDepRel>
				-->
			</function>
			<!-- #endif -->
			
			<function name="redistributeStanfordRelationsMultiwordPreposition">
			<!-- #ifndefGIA_REDISTRIBUTE_STANFORD_RELATIONS_ACTION_PREPOSITION_ACTION -->
				<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_DEP_AND_PREP_AND_XCOMP -->
				<!-- #ifdefGIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION_REDISTRIBUTION -->
					<!-- for queries only (1j6h) -->
					<!--
					<example>
					What is the Co-cart designed to do?
					dep(designed-5, What-1)
					auxpass(designed-5, is-2)
					nsubjpass(designed-5, Co-cart-4)
					xsubj(do-7, Co-cart-4)
					aux(do-7, to-6)
					xcomp(designed-5, do-7)
					interpret; _to-do(design[5], do[7]) + _dep(design[5], what[1]) -> _to-do(design[5], what[1])

					What is the cart designed to integrate with?
					dep(designed-5, What-1)
					auxpass(designed-5, is-2)
					det(cart-4, the-3)
					nsubjpass(designed-5, cart-4)
					xsubj(integrate-7, cart-4)
					root(ROOT-0, designed-5)
					aux(integrate-7, to-6)
					xcomp(designed-5, integrate-7)
					prep(integrate-7, with-8)
					interpret;
						dep(designed-5, What-1)
						_to-do(designed-5, integrate-7)
						prep(integrate-7, with-8)
						=>
						_to-do(designed-5, integrate-7)
						prep_with(integrate-7, What-1)
					</example>



					<paramDepRel mode="redistribute">
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_dep" />
					<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
					<option numberOfRelations="2" />
					<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="do" />
					<option disableRelation="true" REL="2" />
					<option disableEntity="true" REL="1" REL_ENT="2" disableEntityUseOriginalValues="true" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					</paramDepRel>


					<example>
					interpret;
					_to-do(designed-5, integrate-7)
					dep(designed-5, What-1)
					prep(integrate-7, with-8)
					=>
					_to-do(designed-5, integrate-7)
					prep_with(integrate-7, What-1)
					</example>
					<paramDepRel mode="redistribute">
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_dep" />
					<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
					<option numberOfRelations="3" />
					<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_prep" />
					<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
					<option disableRelation="true" REL="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					</paramDepRel>
					-->
				<!-- #endif -->
				<!-- #endif -->
			<!-- #endif -->

			<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_DEP_AND_PREP_WITH_BE -->
				<!-- for queries only (1j6g) -->
				
				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<!--
				<example>
				What are the patent claims on?
				match dep with prep
					dep(are-2, What-1) + nsubj(are-2, claims-5) + prep(are-2, on-6):
						dep(are-2, What-1) + prep(are-2, on-6) => prep_on(are-2, What-1)
						 [then rely upon redistributeStanfordRelationsMultiwordPreposition() for nsubj(are-4, claims-3) / prep_on(are-4, frame-8) => prep_on(claims-3, frame-8)]
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_dep" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_prep" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				</paramDepRel>
				-->

				<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
				<example><!--
				What are the patent claims on?
				match dep with prep
					dep(What-1, on-6) + nsubj(What-1, claims-5) + cop(What-1, are-2) => prep_on(claims-3, What-1)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_dep" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_cop" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="what" /> <!-- added specificity 17 April 2014 -->
				<option useRelationTest="true" REL="3" REL_ENT="2" relationTest="be" />
				<option disableRelation="true" REL="2" />
				<option disableRelation="true" REL="3" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option disableEntity="true" REL="3" REL_ENT="2" />
				</paramDepRel>
			<!-- #endif -->

			<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_NSUBJ_AND_PREPOSITION -->
				<example><!--
				need to consider this case for the following example text;
				The patent claims are on the frame.
				The patent claims are on the cart frame, the wheels and the golf bag connection mechanism.
				det(claims-3, The-1)
				nn(claims-3, patent-2)
				nsubj(are-4, claims-3)
				root(ROOT-0, are-4)
				det(frame-8, the-6)
				nn(frame-8, cart-7)
				prep_on(are-4, frame-8)
				det(wheels-11, the-10)
				prep_on(are-4, wheels-11)
				conj_and(frame-8, wheels-11)
				det(mechanism-17, the-13)
				nn(mechanism-17, golf-14)
				nn(mechanism-17, bag-15)
				nn(mechanism-17, connection-16)
				prep_on(are-4, mechanism-17)
				conj_and(frame-8, mechanism-17)
				--></example>
				
				<!-- #ifdefGIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR -->
				<example><!--
				eg [case added GIA 2c1c] 
				The chicken is not near the house.
				nsubj(is-3, chicken-2) + prep_near(is-3, house-7) + neg(is-3, not-4) -> neg(near-5, not-4)
				The chicken is sometimes near the house.
				nsubj(is-3, chicken-2) + prep_near(is-3, house-7) + advmod(is-3, sometimes-4) -> advmod(near-5, sometimes-4)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option expectToFindPrepositionTest="true" REL="2" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="_neg|_advmod" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="be" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="3" />
				</paramDepRel>
				<!-- #endif -->
				
				<example><!--
				eg1 look for nsubj/prep combination, eg nsubj(are-4, claims-3) + prep_on(are-4, frame-8) => prep_on(claims-3, frame-8)
				eg2 case added 15 May 2012 for ; The claims that are on the frame are blue. , nsubj(are-4, claims-2) + prep_on(are-4, frame-7) + rcmod(claims-2, are-4)
					//OLD: look for nsubj/prep combination, eg nsubj(next-4, garage-2) + prep_to(next-4, house-7) => prep_subj(next_to, house) + prep_subj(next_to, garage)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option expectToFindPrepositionTest="true" REL="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_NSUBJ_AND_PREPOSITION_OLD -->
				<!--
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_psubj" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_pobj" />
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="2" REL_ENT="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="2" REL="2" REL_ENT="1" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="2" REL="2" REL_ENT="1" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="3" />
				-->
				<!-- #else -->
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<!--eg;
				[case added 15 May 2012 for ]
				The claims that are on the frame are blue.
				nsubj(are-4, claims-2)
				prep_on(are-4, frame-7)
				rcmod(claims-2, are-4)
				-->
				<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_rcmod" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="2" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRelationTest="true" REL="3" REL_ENT="2" relationTest="be" />
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->
			<!-- #endif -->

				<example><!--
				<!-- stanford parser prepositition reduction check (based upon http:
				Y	The woman is white according to John.
				Y	The job was complete apart from the axel.
				Y	As for Tim, he knew no other way.
				Y	As per physics, the ball fell.
				N	As regards the apple.
				Y	Aside from that, all was good.
				N	They went back to the mall.
				Y	It grew tall because of the water.
				N	He is close to the house.
				N	The computer broke due to the fire.
				Y	All is fine except for the carrot.
				Y	The house is far from the beach.
				Y	The man fell into the boat.
				Y	The kitten is inside of the box.
				Y	The kettle is noisy instead of quite.
				N	The house is left of the bank.
				N	The carriage is near to the horse.
				N	The farmer is next to the plank.
				N	The chicken goes on to the plank.
				N	The chicken when out of the box.
				N	The man is outside of the house.
				N	Owing to the weather, he bought the paint.
				Y	Prior to the fall, he ate a pie.

				Y	Regardless of the time, it will be done.
				N	Right of the house, is the beach.
				N	Subsequent to the holidays, it will be done.
				N	Thanks to his results, he will watch tv.
				N	is that of Tom's doing?
				N	He reached up to the sky.
				N	He eats chocolate, where as he is skinny. [Only possible for stanford core nlp - not for stanford parser]

				N	As far as they are concerned, nothing could be better. [Only possible for stanford core nlp - not for stanford parser]
				Y	He bought a pie as well as the cake.

				collapse these prepositions;

				[CaseD]
				nsubj(broke-3, computer-2)
				acomp(broke-3, due-4)
				prep_to(due-4, fire-7)

					[case added 1 June 2012]
					He used a computer that broke due to the fire.
					nsubj(broke-6, computer-4)
					rcmod(computer-4, broke-6)
					acomp(broke-6, due-7)
					prep_to(due-7, fire-10)

				[CaseA]
				nsubj(close-3, He-1)
				cop(close-3, is-2)
				prep_to(close-3, house-6) [assert "to"/"of" prepositions 5 July 2013]

				[CaseA]
				nsubjpass(left-4, house-2)
				auxpass(left-4, is-3)
				prep_of(left-4, bank-7)

					[DONE required to be removed based upon the following; In addition to fast assembly, time is saved by not having to connect and disconnect the golf cart and bag at the beginning and end of a game.]
					nsubjpass(saved-9, time-7)
					auxpass(saved-9, is-8)
					prep_in_addition_to(saved-9, assembly-5)

				[CaseA]
				nsubj(near-4, carriage-2)
				cop(near-4, is-3)
				prep_to(near-4, horse-7)

					[case added 15 May 2012]
					He rode the carriage that is near to the horse.
					nsubj(near-7, carriage-4)
					cop(near-7, is-6)
					rcmod(carriage-4, near-7)
					prep_to(near-7, horse-10)

				[CaseA]
				nsubj(next-4, farmer-2)
				cop(next-4, is-3)
				prep_to(next-4, plank-7

				[CaseB]
				nsubj(goes-3, chicken-2)
				prt(goes-3, on-4)
				prep_to(goes-3, plank-7)

				[CaseA]
				nsubj(outside-4, man-2)
				cop(outside-4, is-3)
				prep_of(outside-4, house-7)

					-------------------
					All removed cases:
					-------------------

					[Removed 3 August 2012]
					[CaseB]
					nsubj(went-2, They-1)
					advmod(went-2, back-3)
					prep_to(went-2, mall-6)

					[Removed because (currentRelationInList3->relationGovernorIndex != currentRelationInList->relationGovernorIndex)]
					dobj(bought-7, paint-9)
					partmod(bought-7, Owing-1) //NB currently interpreted as obj
					prep_to(Owing-1, weather-4)

					[CaseE]
					nsubj(beach-8, Right-1)
					cop(beach-8, is-6)
					prep_of(Right-1, house-4)

					[CaseD]
					nsubjpass(done-9, it-6)
					partmod(done-9, Subsequent-1)
					prep_to(Subsequent-1, holidays-4)

					[CaseD]
					nsubj(watch-8, he-6)
					partmod(watch-8, Thanks-1)
					prep_to(Thanks-1, results-4)

					[CaseF]
					nsubj(doing-6, that-2)
					aux(doing-6, is-1)
					prep_of(that-2, Tom-4)

					[Not required to be removed based upon the following; Space is saved by not having a bulky cart to store at home and in the car. , because "to-10" is not "be-10"]
					nsubj(store-11, cart-9)
					aux(store-11, to-10)
					prep_at(store-11, home-13)
					prep_in(store-11', car-17)

				[CaseB]
				nsubj(reached-2, He-1)
				prt(reached-2, up-3)
				prep_to(reached-2, sky-6)

					[case added 1 June 2012]
					It was he that reached up to the sky.
					nsubj(reached-5, he-3)
					rcmod(he-3, reached-5)
					prt(reached-5, up-6)
					prep_to(reached-5, sky-9)


				summary of multiword preposition contraction process;
				3. obj/subj (a, b)
				2. aux, auxpass, cop, acomp, partmod, prt ) (a, z)
				1. prep_x (a, c)
				->
				3. obj/subj
				1. prep_z_c(a, c)

				....
				additional tests added 15 May 2012;

				Y	she hits the ball, close to the house.
				N	she hits the ball, left of the house.
				Y	she hits the ball, near to the house.
				Y	she hits the ball, outside of the house.
				N	she hits the ball, right of the house.

				nsubj(hits-2, she-1)
				root(ROOT-0, hits-2)
				det(ball-4, the-3)
				dobj(hits-2, ball-4)
				appos(ball-4, right-6)
				det(house-9, the-8)
				prep_of(right-6, house-9)

					-------------------
					All original cases:
					-------------------

					[CaseA]
					nsubj(close-3, He-1)
					cop(close-3, is-2)
					prep_to(close-3, house-6)

					[CaseA] {NOT SUPPORTED}
					nsubjpass(left-4, house-2)
					auxpass(left-4, is-3)
					prep_of(left-4, bank-7)

					[CaseA]
					nsubj(near-4, carriage-2)
					cop(near-4, is-3)
					prep_to(near-4, horse-7)

					[CaseA]
					nsubj(next-4, farmer-2)
					cop(next-4, is-3)
					prep_to(next-4, plank-7

					[CaseA]
					nsubj(outside-4, man-2)
					cop(outside-4, is-3)
					prep_of(outside-4, house-7)

					[CaseB]
					nsubj(went-2, They-1)
					advmod(went-2, back-3)
					prep_to(went-2, mall-6)

					[CaseB]
					nsubj(goes-3, chicken-2)
					prt(goes-3, on-4)
					prep_to(goes-3, plank-7)

					[CaseB]
					nsubj(reached-2, He-1)
					prt(reached-2, up-3)
					prep_to(reached-2, sky-6)


					[CaseD]
					nsubj(broke-3, computer-2)
					acomp(broke-3, due-4)
					prep_to(due-4, fire-7)

					[CaseD]
					nsubjpass(done-9, it-6)
					partmod(done-9, Subsequent-1)
					prep_to(Subsequent-1, holidays-4)

					[CaseD]
					nsubj(watch-8, he-6)
					partmod(watch-8, Thanks-1)
					prep_to(Thanks-1, results-4)

					[CaseE]
					nsubj(beach-8, Right-1)
					cop(beach-8, is-6)
					prep_of(Right-1, house-4)

					[CaseF]
					nsubj(doing-6, that-2)
					aux(doing-6, is-1)
					prep_of(that-2, Tom-4)


				--></example>

				<!-- optMultA -->
				<example><!--
				[CaseA]
				He is close to the house.
				prep_to(close-3, house-6)
				cop(close-3, is-2)
				nsubj(close-3, He-1)
				det(house-6, the-5)
				--></example>
				<paramDepRel mode="redistribute">
				<option expectToFindPrepositionTest="true" REL="1" />
				<!-- NB this assumes "cop/aux" etc relations cannot be disabled in fillGrammaticalArraysStanford [must disable these later, at the end of redistribution] -->
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="_subj|_obj" relationArrayTestSize="2" />
				<!-- note the following test should not be required as disabled relations eg cop are not being parsed: "if(!(currentRelationInList->prepositionCombinationAlreadyCreatedTemp))" -->
				<option numberOfRelations="3" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="to|of" relationArrayTestSize="2" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_cop" relationArrayTestSize="1" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_IGNORE_NSUBJ_AND_PREPOSITION_AND_COP_AND_DET -->
				<!--
				prevents multiword prepositional collapse of "name of" in; "Max is the name of the red dog" [/ "3 is the number of the red dogs."], based on 'det(name-4, the-3)'
				nsubj(name-4, Max-1)
				cop(name-4, is-2) //rel2
				det(name-4, the-3)
				root(ROOT-0, name-4)
				det(dog-8, the-6) //rel4
				amod(dog-8, red-7)
				prep_of(name-4, dog-8)
				-->
				<!-- <option relationTestSpecialCaseNotDefinite="true" REL="3" REL_ENT="1" /> -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="false" REL="3" REL_ENT="1" />
				<!-- #endif -->
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableRelation="true" REL="2" />
				<option disableRelation="true" REL="3" />
				<option disableEntity="true" REL="2" REL_ENT="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<!--
				[case added 15 May 2012 for ]
				<He rode the carriage that is near to the horse.
				<nsubj(near-7, carriage-4)
				<cop(near-7, is-6)
				<rcmod(carriage-4, near-7)
				<prep_to(near-7, horse-10)
				-->
				<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="1" />
				<option useRelationTest="true" REL="4" REL_ENT="3" relationTest="_rcmod" />
				<option useRelationIndexTest="true" REL="4" REL_ENT="2" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="4" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="2" />
				<!-- #endif -->
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="1" REL_ENT="3" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="2" REL="1" REL_ENT="3" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="3" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="3" />
				</paramDepRel>

				<!-- optMultB -->
				<example><!--
				[CaseB]
				The chicken goes on to the plank.
				nsubj(goes-3, chicken-2)
				prt(goes-3, on-4)
				prep_to(goes-3, plank-7)
				--></example>
				<paramDepRel mode="redistribute">
				<option expectToFindPrepositionTest="true" REL="1" />
				<!-- NB this assumes "cop/aux" etc relations cannot be disabled in fillGrammaticalArraysStanford [must disable these later, at the end of redistribution] -->
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="_subj|_obj" relationArrayTestSize="2" />
				<!-- note the following test should not be required as disabled relations eg cop are not being parsed: "if(!(currentRelationInList->prepositionCombinationAlreadyCreatedTemp))" -->
				<option numberOfRelations="3" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_prt" relationArrayTestSize="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="2" />
				<option disableEntity="true" REL="2" REL_ENT="2" />
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="1" REL_ENT="3" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="2" REL="1" REL_ENT="3" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="2" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="3" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="3" />
				</paramDepRel>

				<!-- optMultD -->
				<example><!--
				[CaseD]
				Subsequent to the holidays, it will be done.
				nsubjpass(done-9, it-6)
				partmod(done-9, Subsequent-1)
				prep_to(Subsequent-1, holidays-4)
				--></example>
				<paramDepRel mode="redistribute">
				<option expectToFindPrepositionTest="true" REL="1" />
				<!-- NB this assumes "cop/aux" etc relations cannot be disabled in fillGrammaticalArraysStanford [must disable these later, at the end of redistribution] -->
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="_subj|_obj" relationArrayTestSize="2" />
				<!-- note the following test should not be required as disabled relations eg cop are not being parsed: "if(!(currentRelationInList->prepositionCombinationAlreadyCreatedTemp))" -->
				<option numberOfRelations="3" />
				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<!-- <option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_to-be|_partmod" relationArrayTestSize="2" /> -->
				<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_to-be|_vmod" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="2" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<!-- <option disableRelation="true" REL="2" /> //removed 15 July 2013 to allow double use of partmod eg "The Co-cart is a high quality, ultra compact, lightweight cart, also known as a trolley or buggie.: partmod(quality-6, known-15) + prep_as(known-15, trolley-18) + prep_as(known-15, buggie-20) -> prep_know_as(quality[6], trolley[18]) + prep_know_as(quality[6], buggie[20]) -->
				<option disableEntity="true" REL="2" REL_ENT="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="1" REL_ENT="3" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="2" REL="1" REL_ENT="3" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="2" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="3" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="3" />
				<assert variable="disableRelationAfterFinish" REL="2" />
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_REDISTRIBUTE_RELATIONS_INTERPRET_OF_AS_POSSESSIVE_FOR_SUBSTANCES -->
			<!--
			<function name="redistributeStanfordRelationsInterpretOfAsPossessive">
				<example>
				eg The ball of the red dog is green. prep_of(ball-2, dog-6) -> poss(ball-5, dog-3)
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option expectToFindPrepositionTest="true" REL="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="of" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_poss" />
				</paramDepRel>
			</function>
			-->

			<!-- #ifdefGIA_REDISTRIBUTE_RELATIONS_SUPPORT_WHAT_IS_THE_NAME_NUMBER_OF_QUERIES -->
			<function name="redistributeStanfordRelationsCreateQueryVarsWhatIsTheNameNumberOf">
				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 -->
				<!--
				<example>interpret
				What is the name of the red dog near the farm? [return entity names]
					nsubj(is-2, name-4) + attr(is-2, What-1) {+ det(name-4, the-3)} + poss/prep_of(name-4, dog-8) -> appos(dog-1, _$qVar[1]) {_name(That-1, _$qVar)??}
				'What is the dog's name?'
					nsubj(is-2, name-6) + attr(is-2, What-1) + poss(name-6, dog-4)
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_attr" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="what" relationArrayTestSize="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="what" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="name" />
				<option disableRelation="true" REL="1" />
				<option disableRelation="true" REL="3" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option disableEntity="true" REL="3" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> // convert "What" to _$qVar
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="2" REL_ENT="2" />
				</paramDepRel>
				-->
					<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
					<example><!--interpret
					What is the name of the red dog near the farm? [return entity names]
						nsubj(What-1, name-4) + cop(What-1, is-2) {+ det(name-4, the-3)} + prep_of(name-4, dog-8) -> appos(dog-1, _$qVar[1]) {_name(That-1, _$qVar)??}
					'What is the dog's name?'
						nsubj(What-1, name-6) + cop(What-1, is-2) + poss(name-6, dog-4)
					--></example>
					<paramDepRel mode="redistribute">
					<option numberOfRelations="3" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationArrayTest="true" REL="2" REL_ENT="1" relationArrayTest="what" relationArrayTestSize="1" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
					<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="what" />
					<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="name" />
					<option disableRelation="true" REL="1" />
					<option disableRelation="true" REL="3" />
					<option disableEntity="true" REL="1" REL_ENT="2" disableEntityUseOriginalValues="true" />
					<option disableEntity="true" REL="2" REL_ENT="2" disableEntityUseOriginalValues="true" />
					<option disableEntity="true" REL="3" REL_ENT="3" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What" to _$qVar -->
					<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="2" REL_ENT="2" />
					</paramDepRel>
					<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 [OLD IMPLEMENTATION] --> 
					<!--
					<example>interpret
					What is the name of the red dog near the farm? [return entity names]
						nsubj(What-1, name-4) + cop(What-1, is-2) {+ det(name-4, the-3)} + prep_of(name-4, dog-8) -> appos(dog-1, _$qVar[1]) {_name(That-1, _$qVar)??}
					'What is the dog's name?'
						nsubj(What-1, name-6) + cop(What-1, is-2) + poss(name-6, dog-4)
					</example>
					<paramDepRel mode="redistribute">
					<option numberOfRelations="1" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="what" />
					<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="name" />
					<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="1" REL_ENT="1" />
					</paramDepRel>
					-->
				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 -->		
				<!--
				<example>interpret
				What is the number of the red dogs near the farm? [return entity number/quantity]
				nsubj(is-2, number-4) + attr(is-2, What-1) {+ det(number-4, the-3)} + poss/prep_of(number-4, dogs-8) -> _quantity(dog[8], _$qVar[1])
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_attr" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="what" relationArrayTestSize="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="what" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="number" />
				<option disableRelation="true" REL="1" />
				<option disableRelation="true" REL="3" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option disableEntity="true" REL="3" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> //convert "What" to _$qVar
				</paramDepRel>
				-->
					<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
					<example><!--interpret
					What is the number of the red dogs near the farm? [return entity number/quantity]
					nsubj(What-1, number-4) + cop(What-1, is-2) {+ det(number-4, the-3)} + poss/prep_of(number-4, dogs-8) -> _quantity(dog[8], _$qVar[1])
					--></example>
					<paramDepRel mode="redistribute">
					<option numberOfRelations="3" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationArrayTest="true" REL="2" REL_ENT="1" relationArrayTest="what" relationArrayTestSize="1" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
					<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="what" />
					<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="number" />
					<option disableRelation="true" REL="1" />
					<option disableRelation="true" REL="3" />
					<option disableEntity="true" REL="1" REL_ENT="2" disableEntityUseOriginalValues="true" />
					<option disableEntity="true" REL="2" REL_ENT="2" disableEntityUseOriginalValues="true" />
					<option disableEntity="true" REL="3" REL_ENT="3" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What" to _$qVar -->
					</paramDepRel>
			</function>
			<!-- #endif -->

			<!-- NLC Only -->
			<!-- added 2f18a 22-July-2014 -->
			<function name="redistributeStanfordRelationsTheNumberOf">
				<example><!--interpret
				5 is the number of red dogs.
				nsubj(number-4, 5-1) + cop(number-4, is-2) + prep_of(number-4, dogs-7) [+ IGNORE: det(number-2, The-1)] -> _quantity(dog[5], 5[7])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="number|amount" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />	<!-- NB _poss test is an artefact and is no longer required -->
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableRelation="true" REL="3" />
				<option disableEntity="true" REL="1" REL_ENT="1" disableEntityUseOriginalValues="true" />
				<option disableEntity="true" REL="2" REL_ENT="2" disableEntityUseOriginalValues="true" />
				<option disableEntity="true" REL="3" REL_ENT="3" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>

				<example><!--interpret
				The number of red dogs is 5.
				nsubj(5-7, number-2) + cop(5-7, is-6) + prep_of(number-2, dogs-5) [+ IGNORE: det(number-4, the-3)]  -> _quantity(dog[5], 5[7])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="2" relationArrayTest="number|amount" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="2" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />	<!-- NB _poss test is an artefact and is no longer required -->
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="1" />
				<option disableRelation="true" REL="3" />
				<option disableEntity="true" REL="1" REL_ENT="2" disableEntityUseOriginalValues="true" />
				<option disableEntity="true" REL="2" REL_ENT="2" disableEntityUseOriginalValues="true" />
				<option disableEntity="true" REL="3" REL_ENT="3" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				</paramDepRel>
				
				<!-- #ifdefGIA_SUPPORT_NUMBER_OF -->
				<example><!--interpret
				The number of blue birds near the mountain.
				prep_near(number-2, mountain-8) + prep_of(number-2, birds-5)  -> prep_near(birds-5, mountain-8) + birds-5 with isNumberOf=true
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option expectToFindPrepositionTest="true" REL="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="number|amount" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />	<!-- NB _poss test is an artefact and is no longer required -->
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNumberOf" value="true" REL="1" REL_ENT="1" />				
				<option disableEntity="true" REL="2" REL_ENT="3" />
				<option disableEntity="true" REL="2" REL_ENT="1" />
				<option disableRelation="true" REL="2" />
				</paramDepRel>
				
				<example><!--interpret
				Number of red dogs.
				prep_of(number-4, dogs-7) -> + dog-7 with isNumberOf=true
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="number|amount" relationArrayTestSize="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />	<!-- NB _poss test is an artefact and is no longer required -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNumberOf" value="true" REL="1" REL_ENT="2" />
				<option disableEntity="true" REL="1" REL_ENT="3" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option disableRelation="true" REL="1" />
				</paramDepRel>
				<!-- #else -->
				<!--
				<example>interpret
				The number of blue birds near the mountain.
				prep_near(number-2, mountain-8) + prep_of(number-2, birds-5)  -> prep_near(birds-5, mountain-8) + _quantity(birds-5, _$qVar[1])
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option expectToFindPrepositionTest="true" REL="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="number|amount" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" />
				<option disableEntity="true" REL="2" REL_ENT="3" />
				</paramDepRel>
				
				<example>interpret
				Number of red dogs.
				prep_of(number-4, dogs-7) -> _quantity(dog[8], _$qVar[1])
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="number|amount" relationArrayTestSize="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" />
				<option disableEntity="true" REL="1" REL_ENT="3" />
				</paramDepRel>
				-->
				<!-- #endif -->
				
			</function>
			
			<!-- #ifdefGIA_REDISTRIBUTE_RELATIONS_SUPPORT_NAME_OF -->
			<function name="redistributeStanfordRelationsInterpretNameOfAsDefinition">
				<example><!--
				eg interpret 'The red dog's name is Max.'		nsubj(Max-7, name-5) + poss(name-5, dog-3) -> appos(dog-3, Max-7)
				eg interpret 'The name of the red dog is Max.' nsubj(Max-7, name-5) + prep_of(name-5, dog-3) -> appos(dog-3, Max-7)
				eg interpret 'Max is the name of the red dog.' nsubj(name-4, Max-1) + prep_of(name-4, dog-8) -> appos(dog-3, Max-7)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="name" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="2" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				<!-- #ifdefGIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR -->
				<option disableEntity="true" REL="2" REL_ENT="3" />
				<!-- #endif -->
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<!-- <option useRedistributeSpecialCaseIsNameAssignment="true" REL="2" REL_ENT="2" /> -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isName" value="true" REL="2" REL_ENT="2" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="of|_poss" relationArrayTestSize="2" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="name" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<!-- #ifdefGIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR -->
				<option disableEntity="true" REL="2" REL_ENT="3" />
				<!-- #endif -->
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<!-- <option useRedistributeSpecialCaseIsNameAssignment="true" REL="2" REL_ENT="2" /> -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isName" value="true" REL="2" REL_ENT="2" />
				</paramDepRel>
			</function>
			<!-- #endif -->

			<function name="redistributeStanfordRelationsCollapseAdvmodRelationGovernorBe">
				<example><!--
				eg The rabbit is 20 meters away. nsubj(is-3, rabbit-2) + advmod(is-3, away-6) - > _predadj(rabbit-2, away-6)
					//OLD: nsubj(is-3, rabbit-2) + advmod(is-3, away-6) - > nsubj(away-6, rabbit-2) )
				case added 15 May 2012 for ; nsubj(is-4, rabbit-2) + advmod(is-4, away-7) + rcmod(rabbit-2, is-4) -> _predadj(rabbit-2, away-7)
				--></example>
				<!-- #ifdefGIA_COLLAPSE_ADVMOD_RELATION_GOVERNOR_BE_TO_PREDADJ_NOT_SUBJ -->
					<!-- #ifdefGIA_COLLAPSE_ADVMOD_RELATION_GOVERNOR_BE_TO_PREDADJ_NOT_SUBJ_OLD -->
					<!--
					<paramDepRel mode="redistribute">
					<option numberOfRelations="2" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_advmod" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
					<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option disableEntity="true" REL="1" REL_ENT="1" disableEntityUseOriginalValues="true" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_predadj" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option disableRelation="true" REL="1" />

					<example>
					The rabbit that is 20 meters away is fat.
					nsubj(is-4, rabbit-2)
					advmod(is-4, away-7)
					rcmod(rabbit-2, is-4)
					</example>
					<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
					<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_rcmod" />
					<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
					<option useRelationTest="true" REL="3" REL_ENT="2" relationTest="be" />

					</paramDepRel>
					-->
					<!-- #else -->
					<!-- Case currently enabled -->
					<paramDepRel mode="redistribute">
					<option numberOfRelations="2" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_advmod" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
					<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option disableEntity="true" REL="1" REL_ENT="1" disableEntityUseOriginalValues="true" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_predadj" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option disableRelation="true" REL="2" />
					</paramDepRel>
					<!-- #endif -->
				<!-- #else -->
					<!--
					<paramDepRel mode="redistribute">
					<option numberOfRelations="2" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_advmod" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
					<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option disableEntity="true" REL="1" REL_ENT="1" disableEntityUseOriginalValues="true" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option disableRelation="true" REL="2" />
					</paramDepRel>
					-->
				<!-- #endif -->
			</function>

			<function name="redistributeStanfordRelationsCollapseSubjectAndCopGenerateAdjectivesAndAppos">
				<example><!--
				eg1 Kane is late. nsubj(late-3, Kane-1) + cop(late-3, is-2) -> _predadj(kane-1, late-3) [NB non-determinate of governer and dependent of subject relation; take as indicator of substance]
				eg1b Riding in the park is good csubj(good-6, Riding-1) + cop(good-6, is-5) -> _predadj(Riding-1, good-6) 	//added 27 October 2013
				or
				eg2 She is the one. nsubj(one-4, She-1) + cop(one-4, is-2) + det(one-4, the-3) -> appos(She-1, one-4) [NB determinate of dependent of subject relation; take as an indicator of definition]
				or
				eg3 The girl is tall. nsubj(tall-6, girl-2) + cop(tall-6, is-3) + det(girl-2, The-1) -> _predadj(girl-2, tall-6) [NB non-plural and determinate of governer of subject relation; take as indicator of substance]
				or
				eg4 bikes are machines. nsubj(machines-3, bikes-1) + cop(machines-3, are-2) -> appos(bikes-1, machines-3) [NB plural and non-determinate of governer of subject relation; take as an indicator of definition]
				or
				eg5 the wheels are green. nsubj(green-6, wheels-4) + cop(green-6, are-5) -> _predadj(wheels-4, green-6) [NB plural and determinate of governer of subject relation; take as indicator of substance]
				or
				eg6 That is Jim. nsubj(Jim-3, That-1) + cop(Jim-3, is-2) -> appos(That-1, Jim-3)
				or
				eg7 The time is 06:45. nsubj(06:45-4, time-2) + cop(06:45-4, is-3) + det(time-2, The-1) -> appos(time-2, 06:45-4)
				--></example>
				<!-- #ifndefGIA_OPTIMISE_PERFORMANCE_FOR_RELEX_PATENT_QUERIES_REPLICATION_RATHER_THAN_RELEX_PATENT_SYNTACTIC_PROTOTYPE_OUTPUT_REPLICATION -->
					<!-- #ifndefGIA_COLLAPSE_COP_RELATION_DEPENDENT_BE_TO_APPOS_NOT_PREDADJ_OLD -->
						<paramDepRel mode="redistribute">
						<assert variable="NLPfeatureParserStanfordCoreNLP" />
						<!-- #ifdefGIA_TRANSLATOR_SUPPORT_CSUB_AND_COP_GENERATE_ADJECTIVES-->
						<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj|_csubj" relationArrayTestSize="2" />	<!-- added 27 October 2013 -->
						<!-- #else -->
						<!-- <option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" /> -->
						<!-- #endif -->
						<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
						<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
						<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" /> <!-- redundant test -->
						<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
						<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
						<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" /> <!-- an impossible check which is therefore guaranteed to set auxiliaryIndicatesDifferentReferenceSet to true -->
						<!-- #endif -->
						<option numberOfRelations="2" />
						<!-- <option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="JJ|JJR|JJS|RB|RBR|RBS" relationArrayTestSize="6" relationArrayTestSpecialCasePOStemp="true" /> -->
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="JJ" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="JJR" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="JJS" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="RB" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="RBR" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="RBS" REL="1" REL_ENT="1" />
						<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_predadj" />
						<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
						<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
						<option disableRelation="true" REL="2" />
						</paramDepRel>

						<paramDepRel mode="redistribute">
						<assert variable="NLPfeatureParserStanfordCoreNLP" />
						<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
						<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
						<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
						<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" /> <!-- redundant test -->
						<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
						<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" /> <!-- an impossible check which is therefore guaranteed to set auxiliaryIndicatesDifferentReferenceSet to true -->
						<option numberOfRelations="2" />
						<!-- <option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="CD|NN|NNS|NNP|NNPS" relationArrayTestSize="5" relationArrayTestSpecialCasePOStemp="true" /> -->
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="CD" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="NN" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="NNS" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="NNP" REL="1" REL_ENT="1" />
						<specialCase type="specialCaseCharacteristicsTestOrVector" variable="stanfordPOStemp" value="NNPS" REL="1" REL_ENT="1" />
						<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
						<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
						<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
						<option disableRelation="true" REL="2" />
						</paramDepRel>

						<!-- must switch subject to object; -->
						<example><!--eg;
						The boat that was rowed ate a pie.
						The boat that is rowed ate a pie.
						The boat that will be rowed ate a pie.
						The boat that has been rowed ate a pie.
						The boat that was being rowed ate a pie.
						The boat that is being rowed ate a pie.
						nsubj(rowed-5, boat-2) -> dobj(rowed-5, boat-2)
						nsubj(rowed-5, boat-2) -> dobj(rowed-5, boat-2)
						nsubj(rowed-6, boat-2) -> dobj(rowed-5, boat-2)
						nsubj(rowed-6, boat-2) -> dobj(rowed-5, boat-2)
						nsubjpass(rowed-6, boat-2) [already interpreted as obj in GIA]
						nsubjpass(rowed-6, boat-2) [already interpreted as obj in GIA]
						--></example>
						<paramDepRel mode="redistribute">
						<assert variable="NLPfeatureParserStanfordCoreNLP" />
						<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
						<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
						<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
						<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" /> <!-- redundant test -->
						<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
						<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" /> <!-- an impossible check which is therefore guaranteed to set auxiliaryIndicatesDifferentReferenceSet to true -->
						<option numberOfRelations="2" />
						<!-- <option useRelationTest="true" REL="1" REL_ENT="1" relationTest="VBN" relationTestSpecialCasePOStemp="true" /> -->
						<specialCase type="specialCaseCharacteristicsTestAndVector" variable="stanfordPOStemp" value="VBN" REL="1" REL_ENT="1" />
						<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
						</paramDepRel>
					<!-- #else -->
					<!-- not used -->
					<!--
					<example>
					eg the girl is tall nsubj(tall-6, girl-2) + cop(tall-6, is-3) + det(girl-2, The-1)
					eg the wheel is green nsubj(green-6, wheels-4) + cop(green-6, are-5)
					</example>
					<paramDepRel mode="redistribute">
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
					<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" />
					<option numberOfRelations="3" />
					<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_det" />
					<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_predadj" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option disableRelation="true" REL="2" />
					</paramDepRel>

					<example>
					eg she is the one nsubj(one-4, She-1) + cop(one-4, is-2) + det(one-4, the-3)
					</example>
					<paramDepRel mode="redistribute">
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
					<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" />
					<option numberOfRelations="3" />
					<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_det" />
					<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option disableRelation="true" REL="2" />
					</paramDepRel>

					<paramDepRel mode="redistribute">
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
					<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" />
					<option numberOfRelations="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option disableRelation="true" REL="2" />
					</paramDepRel>
					-->
					<!-- #endif -->
				<!-- #else -->
					<!-- not used -->
					<!--
					<paramDepRel mode="redistribute">
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRedistributeSpecialCaseAuxiliaryIndicatesDifferentReferenceSetCheck="true" REL="2" />
					<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="impossibleEntityName" />
					<option numberOfRelations="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option disableRelation="true" REL="2" />
					</paramDepRel>
					-->
				<!-- #endif -->
			</function>

			<function name="redistributeStanfordRelationsAdverbalClauseModifierAndComplement">
			
				<!-- case added GIA 1f1a -->
				<example><!--
				eg If the basket is near the house, the dog is happy. advcl(happy-12, is-4) + mark(is-4, If-1) + nsubj(is-4, basket-3) -> prep_if(happy-12, basket-3)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_advcl" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_mark" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_subj" />
				<option parseDisabledRelation="true" REL="3" /> 	<!--_nsubj relation will have been disabled when nsubj(is-4, basket-3)  + prep_near(is-4, house-7) is converted to prep_near(basket[3], house[7]) in redistributeStanfordRelationsMultiwordPreposition(), so must explicitly allow it to be parsed-->
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="be" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableRelation="true" REL="2" />
				<option disableRelation="true" REL="3" />
				</paramDepRel>
				
				<example><!--
				eg The accident happened as the night was falling. advcl(happen, fall) + mark(fall, as) -> prep_as (happen, fall)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_advcl" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_mark" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableRelation="true" REL="2" />
				</paramDepRel>
				
				<example><!--
				eg If the cow is blue fight the turtle, else fight the pie. : csubj(fight-6, blue-5) + mark(blue-5, If-1) -> prep_if(blue-5, fight-6)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_csubj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_mark" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableRelation="true" REL="2" />
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsClausalSubject">
				<example><!--
				eg What she said makes sense. csubj (make, say) + dobj ( said-3 , What-1 )
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_csubj" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="2" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_subj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsConjunctionAndCoordinate">
				<example><!--
				eg I eat a pie or tom rows the boat. cc(pie-4, or-5) + conj(pie-4, tom-6)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cc" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_subj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="and" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_conj_and" />
				<option disableRelation="true" REL="2" />
				<option disableEntity="true" REL="2" REL_ENT="2" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cc" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_subj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="or" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_conj_or" />
				<option disableRelation="true" REL="2" />
				<option disableEntity="true" REL="2" REL_ENT="2" />
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsGenerateUnparsedQuantityModifers">
				<example><!--
				eg The punter won almost $1000. advmod(won-3, almost-4) + pobj(almost-4, $-5) + num($-5, 1000-6) [Relex: _obj(win[3], $[5]) + _quantity_mod($[5], almost[4])] -> _obj(win[3], $[5]) + _quantity_mod($[5], almost[4])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_advmod" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_pobj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_quantity" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity_mod" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" /> <!-- required to swap variables via redistributeRelationEntityIndexReassignmentUseOriginalValues; -->
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsGenerateMeasures">
				<example><!--
				note GIA_DO_NOT_SUPPORT_SPECIAL_CASE_6A_GENERATE_MEASURES is not supported by
				eg1 The undergraduate student is 18 years old. years old - npadvmod(old, years) -> _measure_time(old[7], years[6]) {IRRELEVANT years: <NER>NUMBER</NER>} + old: <NER>DURATION</NER>
				eg2 The rabbit is 20 meters away. meters away - npadvmod(away-6, meters-5) -> _measure_distance(away[6], meter[5])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_npadvmod" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_measure" />
				</paramDepRel>

				<example><!--
				eg3 Robert ate 4 times a day. dep(times-4, day-6) -> measure_dependency(times-4, day-6) {Relex: _measure_per(times[4], day[6])}
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_dep" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="NERTemp" value="9" REL="1" REL_ENT="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_measure_dependency" />
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsPhrasalVerbParticle">
				<!-- #ifdefGIA_USE_REDISTRIBUTE_STANFORD_RELATIONS_PHRASAL_VERB_PARTICLE_AND_TEMPORAL_MODIFIER -->
				<example><!--
				The disaster happened over night. prt(happened-3, over-4) + tmod(happened-3, night-5) -> over(happened-3, night-5)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_prt" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_tmod" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
				<!-- #endif -->

				<!-- #ifdefGIA_USE_REDISTRIBUTE_STANFORD_RELATIONS_PHRASAL_VERB_PARTICLE_AND_OBJECT_OF_PREPOSITION -->
				<example><!--
				What does the red laser work on? prt(work-6, on-7) + pobj(on-7, What-1) -> on(work-6, What-1) //case added 7 August 2012b
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_prt" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_pobj" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				</paramDepRel>
				<!-- #endif -->

				<!-- #ifdefGIA_USE_REDISTRIBUTE_STANFORD_RELATIONS_PHRASAL_VERB_PARTICLE -->
				<example><!--
				eg They shut down the station. prt(shut, down)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_prt" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				<option disableRelation="true" REL="1" /> <!-- added 11 July 2013 - check this -->
				<option useRedistributeSpecialCaseRelationEntityReassignmentConcatonate="true" REL="1" REL_ENT="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="1" swapIndex="1" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="1" />
					<option redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationID="1" REL="1" REL_ENT="1" swapIndex="2" redistributeSpecialCaseRelationEntityIndexReassignmentConcatonateRelationEntityID="2" />
				</paramDepRel>
				<!-- #endif -->
			</function>

			<function name="redistributeStanfordRelationsCreateQueryVarsWhoWhat">

				<example><!--
				interpret; 'Who rode the bike?' nsubj(rode-2, Who-1) -> nsubj(rode-2, _$qVar-1) [added 7 August 2012]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What"/"Who" to _$qVar -->
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="who" />
				<!-- #ifdefGIA_SUPPORT_WHO_QUERY_ALIAS_ANSWERS -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="1" REL_ENT="2" />
				<!-- #endif -->
				</paramDepRel>
				<example><!--
				interpret; 'What broke the glass?' nsubj(broke-2, What-1) -> nsubj(broke-2, _$qVar-1) [added 7 August 2012]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="what" />
				</paramDepRel>


				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<example><!--
				interpret; 'Who is that?' nsubj(is-2, that-3) + attr(is-2, Who-1) -> appos(That-3, _$qVar-1) [NB _$qVar can be switched in both cases with respect to ]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_attr" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!--convert "What"/"Who" to _$qVar-->
				<!-- #else -->
				<!--
				<option disableRelation="true" REL="2" />
				<option disableEntity="true" REL="1" REL_ENT="1" /> <option disableEntityUseOriginalValues="true" REL="1" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityReassignment="_$qVar" /> //convert "What"/"Who" to _$qVar
				-->
				<!-- #endif -->
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="who" />
				<!-- #ifdefGIA_SUPPORT_WHO_QUERY_ALIAS_ANSWERS -->
				<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="2" REL_ENT="2" />
				<!-- #else -->
				<!--
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="2" REL_ENT="1" />
				-->
				<!-- #endif -->
				<!-- #endif -->
				</paramDepRel>
					<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
					<example><!--
					interpret; 'Who is that?' nsubj(Who-1, that-3) + cop(Who-1, is-2) -> appos(That-3, _$qVar-1) [NB _$qVar can be switched in both cases with respect to ]				
					--></example>
					<paramDepRel mode="redistribute">
					<option numberOfRelations="2" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
					<option disableRelation="true" REL="1" />
					<option disableEntityUseOriginalValues="true" REL="2" REL_ENT="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What"/"Who" to _$qVar -->
					<!-- #else -->
					<!--
					<option disableRelation="true" REL="2" />
					<option disableEntity="true" REL="2" REL_ENT="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityReassignment="_$qVar" /> //convert "What"/"Who" to _$qVar
					-->
					<!-- #endif -->
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="who" />
					<!-- #ifdefGIA_SUPPORT_WHO_QUERY_ALIAS_ANSWERS -->
					<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
					<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="2" REL_ENT="2" />
					<!-- #else -->
					<!--
					<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" REL="2" REL_ENT="1" />
					-->
					</paramDepRel>




				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<example><!--
				interpret; 'What is the time?'  nsubj(is-2, time-4) + attr(is-2, What-1) -> appos(time-4, _$qVar-1) [NB _$qVar can be switched in both cases with respect to ]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_attr" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What"/"Who" to _$qVar -->
				<!-- #else -->
				<!--
				<option disableRelation="true" REL="2" />
				<option disableEntity="true" REL="1" REL_ENT="1" /> <option disableEntityUseOriginalValues="true" REL="1" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityReassignment="_$qVar" /> //convert "What"/"Who" to _$qVar
				-->
				<!-- #endif -->
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="what" />
				</paramDepRel>
					<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
					<example><!--
					interpret; 'What is the time?' nsubj(What-1, time-4) + cop(What-1, is-2) -> appos(time-4, _$qVar-1) [NB _$qVar can be switched in both cases with respect to ]
					--></example>
					<paramDepRel mode="redistribute">
					<option numberOfRelations="2" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
					<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
					<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
					<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
					<option disableRelation="true" REL="1" />
					<option disableEntityUseOriginalValues="true" REL="2" REL_ENT="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What"/"Who" to _$qVar -->
					<!-- #else -->
					<!--
					<option disableRelation="true" REL="2" />
					<option disableEntity="true" REL="2" REL_ENT="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityReassignment="_$qVar" /> //convert "What"/"Who" to _$qVar
					-->
					<!-- #endif -->
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="what" />
					</paramDepRel>


				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<example><!--
				interpret; 'What time is it?' attr(is-3, time-2) + nsubj(is-3, it-4) + det(time-2, What-1) -> appos(time-4, _$qVar-1)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_attr" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_det" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="2" relationArrayTest="what" relationArrayTestSize="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" /> <!-- oldRedundantBeEntity -->
				<option disableEntity="true" REL="1" REL_ENT="2" /> <!-- oldRedundantItEntity -->
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- CHECK THIS overwrite -->
				<assert variable="setDefiniteAfterFinish" REL="2" REL_ENT="1" /> <!-- required such that "time" is treated the same way as when generated by "what is the time?" -->
				</paramDepRel>
					<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
					<example><!--
					interpret; 'What time is it?' dep(is-3, time-2) + nsubj(is-3, it-4) + det(time-2, What-1) -> appos(time-4, _$qVar-1)
					--></example>
					<paramDepRel mode="redistribute">
					<option numberOfRelations="3" />
					<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
					<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_dep" />
					<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_det" />
					<option useRelationArrayTest="true" REL="3" REL_ENT="2" relationArrayTest="what" relationArrayTestSize="1" />
					<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
					<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
					<option disableRelation="true" REL="1" />
					<option disableEntity="true" REL="1" REL_ENT="1" /> <!-- oldRedundantBeEntity -->
					<option disableEntity="true" REL="1" REL_ENT="2" /> <!-- oldRedundantItEntity -->
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
					<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- CHECK THIS overwrite -->
					<assert variable="setDefiniteAfterFinish" REL="2" REL_ENT="1" /> <!-- required such that "time" is treated the same way as when generated by "what is the time?" -->
					</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsCreateQueryVarsHowMuchHowMany">
				<example><!--
				Create Query Vars (eg interpret 'how much'/'how many' advmod(much-2, How-1) + amod(milk-3, much-2) -> _quantity(milk[3], _$qVar[2]) )
				eg1 How much milk should he buy?
				eg2 How many apples should he buy?
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_advmod" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="much|many" relationArrayTestSize="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="2" relationArrayTest="how" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_amod" relationArrayTestSize="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="2" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" /> <!-- disable how -->
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_quantity" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "much" to _$qVar -->
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsCreateQueryVarsWhich">
				<example><!--
				nothing is required here: see identifyComparisonVariableAlternateMethod()
				--></example>
			</function>

			<function name="redistributeStanfordRelationsCreateQueryVarsHowWhenWhereWhy">
				<example><!--
				interpret 'How did the disaster happen?' / 'When should they leave?' / 'Where is the ball?' / 'Why does the star fall?' advmod(happen-5, How-1) / [advmod(leave-4, When-1)?] / advmod(is-2, Where-1) / advmod(fall-5, Why-1) -> how(happen[5], _$qVar[1]) / _%atTime(leave[4], _$qVar[1]) / [_%atLocation(ball[4], _$qVar[1])?] / _%because(fall[5], _$qVar[1])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_advmod|_predadj" relationArrayTestSize="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "how"/"when"/"why" to _$qVar -->
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="how" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_%how" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_advmod|_predadj" relationArrayTestSize="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "how"/"when"/"why" to _$qVar -->
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="when" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_%atTime" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_advmod|_predadj" relationArrayTestSize="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "how"/"when"/"why" to _$qVar -->
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="where" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_%atLocation" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_advmod|_predadj" relationArrayTestSize="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "how"/"when"/"why" to _$qVar -->
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="why" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_%because" />
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsCreateQueryVarsWhat">
				<example><!--
				interpret 'what is...' _obj(enable[5], what[1]) -> _obj(enable[5], _$qVar[1])
				e.g.
				What is the Co-cart designed to do?
				What are the patent claims on?
				What is the name of the red dog near the farm?
				What is the dog's name?
				What is the number of the red dogs near the farm?
				What she said makes sense.
				What does the red laser work on?
				What is the time?
				What broke the glass?
				What is wood used in the delivering of?
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_det" relationTestIsNegative="true" /> <!-- OR if(GIAentityNodeArray[currentRelationInList->relationDependentIndex]->stanfordPOStemp != "WDT")-->
				<option useRelationArrayTest="true" REL="1" REL_ENT="2" relationArrayTest="what" relationArrayTestSize="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "What" to _$qVar -->
				</paramDepRel>
			</function>

			<function name="redistributeStanfordRelationsPartmod">
				<!-- eg Truffles picked during the spring are tasty. partmod(truffle, pick) -> obj(pick, truffle) -->
				<example><!--
				Truffles picked during the spring are tasty.
				prep_during(pick, spring)
				nsubj(tasty, truffle)
				partmod(truffle, pick)
				cop(tasty, be)
				->
				during(pick, spring)
				_predadj(truffle, tasty)
				_obj(pick, truffle)

				An elevator governor rectifying a chicken.
				det(governor-3, An-1)
				nn(governor-3, elevator-2)
				root(ROOT-0, governor-3)
				partmod(governor-3, rectifying-4)
				det(chicken-6, a-5)
				dobj(rectifying-4, chicken-6)
				->
				_subj(governor-3, rectifying-4)
				--></example>
				<!-- #ifdefGIA_REDISTRIBUTE_STANFORD_RELATIONS_PARTMOD_DEAL_WITH_PROGRESSIVE_ANOMALY -->
				<example><!--
				An elevator governor rectifying a chicken. partmod(governor-3, rectifying-4) + dobj(rectifying-4, chicken-6) -> _subj(governor-3, rectifying-4) + dobj(rectifying-4, chicken-6)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<!-- <option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_partmod" /> -->
				<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_vmod" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_subj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				</paramDepRel>
				<!-- #endif -->
				<example><!--
				Truffles picked during the spring are tasty. partmod(truffle, pick) -> obj(pick, truffle)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<!-- Supports Stanford Parser/CoreNLP version 2+ e.g. 2013-04-04 --> 
				<!-- <option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_partmod" /> -->
				<!-- Supports Stanford Parser/CoreNLP version 3+ e.g. 2014-01-04 --> 
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_vmod" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				</paramDepRel>
			</function>
			
			<!-- #ifdefGIA_TRANSLATOR_INTERPRET_OF_AS_OBJECT_FOR_CONTINUOUS_VERBS -->
			<function name="redistributeStanfordRelationsInterpretOfAsObjectForContinuousVerbs">
				<example><!--
				 eg What is wood used in the delivering of?   interpret prep_of(xing, y) as obj(xing, y) )
				 --></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="of" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="2" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="0" REL="1" REL_ENT="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				</paramDepRel>
			</function>
			<!-- #endif -->
							
			<!-- #ifdefGIA_TRANSLATOR_REDISTRIBUTE_STANFORD_RELATIONS_EXPLITIVES -->
			<function name="redistributeStanfordRelationsExpletives">
				<example><!--
				eg 'There is a place that we go.' _expl(be[2], there[1]) + _subj(be[2], place[4]) + _subj(go[7], we[6]) [IRRELEVANT] + _obj(be[2], go[7]) -> _subj(go[7], we[6]) + _obj(go[7], place[4])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_expl" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				<option disableRelation="true" REL="1" />
				<option disableRelation="true" REL="3" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>
			</function>
			<!-- #endif -->

			<function name="redistributeStanfordRelationsDependencyPreposition">
				<example><!--
				redistribute the following stanford relations, eg
					Given the nature of the bank, write the letter.
						translate prep+dep into prep
						prep(write-8, Given-1)
						dep(Given-1, nature-3)
						->prep_given(write-8, nature-3)
						 prep(write-8, Given-1)
						 det(nature-3, the-2)
						 dep(Given-1, nature-3)
						 det(bank-6, the-5)
						 prep_of(nature-3, bank-6)
						 root(ROOT-0, write-8)
						 det(letter-10, the-9)
						 dobj(write-8, letter-10)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_dep" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_prep" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
			</function>

			<!-- updated and reactivated 2f12a 13-July-2014 -->
			<!-- redistributeStanfordRelationsAuxHave() was designed for faulty case "flies" is incorrectly tagged by stanford parser in "Red dogs have flies." (a fault which occurs with STANFORD_CORENLP_DISABLE_INDEPENDENT_POS_TAGGER_WHEN_PARSING_DEPENDENCY_RELATIONS, when using Stanford Parser in conjunction with Stanford CoreNLP. redistributeStanfordRelationsAuxHave() was temporarily disabled @GIA 2c2a [because it was incompatible with "The chicken has not eaten a pie."]) -->
			<!-- #ifdefSTANFORD_CORENLP_DISABLE_INDEPENDENT_POS_TAGGER_WHEN_PARSING_DEPENDENCY_RELATIONS, -->
			<function name="redistributeStanfordRelationsAuxHave">
				<example>
				eg Red dogs have flies. aux(flies-4, have-3) + nsubj(flies-4, dogs-2) + !obj(flies-4, x) -> obj(have-3, flies-4) + nsubj(have-3, dogs-2)	<!-- updated 2f12a 13-July-2014 -->
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_aux" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="have" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				
				<option useRedistributeSpecialCaseNonExistantRelationCheck="true" REL="2" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_obj" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option enableEntity="true" REL="1" REL_ENT="2" /> <!-- reenable "have" entity -->

				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_subj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				</paramDepRel>
			</function>
			<!-- #endif -->
			
			<!-- #ifdefGIA_DO_NOT_DISABLE_AUX_AND_COP_AT_START -->
			<function name="redistributeStanfordRelationsDisableAuxAndCop">
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_aux" />
				<option disableRelation="true" REL="1" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_auxpass" />
				<option disableRelation="true" REL="1" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_cop" />
				<option disableRelation="true" REL="1" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_det" />
				<option disableRelation="true" REL="1" />
				</paramDepRel>
				
				<!-- #ifndef GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_neg" />
				<option disableEntity="true" REL="1" REL_ENT="2" /> <!-- disable "not" entity -->
				</paramDepRel>
				<!-- #endif -->	
			</function>
			<!-- #endif -->
			<!-- #ifdef GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
			<!--
			<function name="collapseRedundantRelationAndMakeNegativeStanford">
				<example>
				eg The chicken has not eaten a pie.: neg(eaten-5, not-4)
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_neg" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" /> // disable "not" entity
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="negative" value="true" REL="1" REL_ENT="1" />
				</paramDepRel>
			</function>	
			-->	
			<!-- #endif -->

			<!-- NLC Only -->
			<function name="redistributeStanfordRelationsDisablePredeterminers">
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option parseDisabledRelation="true" REL="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_det|_predet" relationArrayTestSize="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="2" relationArrayTest="each|every|all" relationArrayTestSize="3" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" /> <!-- disable "each"/"every"/"all" entity -->
				</paramDepRel>
			</function>
			
			<!-- NLC Only -->
			<!-- added 2f13b 14-July-2014 -->
			<!-- #ifdefGIA_REMOVE_REDUNDANT_LOGICAL_CONDITION_ENTITIES, -->
			<function name="redistributeStanfordRelationsDisableRedundantLogicalConditions">
				<example>
				eg For all baskets in the house and apples in the tree, eat the pie. prep_for(eat[13], basket[3]) + prep_for(eat[13], apple[8]) + conj_and(baskets-3, apples-8) + !conj_and(apples-8, x)	{disable prep_for(eat[13], apple[8])}
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="for" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="for" />
				<option useRelationArrayTest="true" REL="3" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="3" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				
				<option useRedistributeSpecialCaseNonExistantRelationCheck="true" REL="3" />
				<option useRelationArrayTest="true" REL="4" REL_ENT="3" relationArrayTest="_conj_and|_conj_or" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="4" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="2" />
				</paramDepRel>
			</function>
			<!-- #endif -->
		
		</file>
		<file name="GIAtranslatorRedistributeRelexRelations">
					
			<function name="collapseRedundantRelationAndMakeNegativeRelex">
				<example><!--
				eg Space is saved by not having a bulky cart. _subj(not[5], by[4]), _subj(have[6], not[5])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="not" relationArrayTestSize="1" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_subj" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="2" relationArrayTest="not" relationArrayTestSize="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<!-- <option useRedistributeSpecialCaseNegativeAssignment="true" REL="2" REL_ENT="1" /> -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="negative" value="true" REL="2" REL_ENT="1" />
				<option disableRelation="true" REL="1" />
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION_REDISTRIBUTION -->
			<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1B_RELATIONS_TREAT_ADVERB_PLUS_SUBJECT_PLUS_OBJECT_RELATION_ALL_WITH_A_DEFINITION_FUNCTION_AS_PROPERTY_LINKS -->
			<function name="redistributeRelexRelationsAdverbPlusObjectPlusSubjectRelationAllWithADefinitionFunctionAsPropertyLinks">
				<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1E_RELATIONS_TREAT_UNQUALIFIED_RELATIONS_AS_CONDITIONS_ALSO -->
				<example><!--eg; The chicken is 3 minutes late. _subj(be[3], chicken[2]) + _obj(be[3], minutes[5]) + _advmod(be[3], late[6]) -> _advmod(late[6], minutes[5]) + _advmod(chicken[2], late[6])
				_subj(be[3], chicken[2])
				_obj(be[3], minutes[5])
				_advmod(be[3], late[6])
				_quantity(minutes[5], 3[4]) [IRRELEVANT]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_advmod" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" /> <!-- redundant test -->
				<option useRelationTest="true" REL="3" REL_ENT="1" relationTest="be" /> <!-- redundant test -->
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_advmod" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
				<!-- #endif -->
			</function>
			<!-- #endif -->
			<!-- #endif -->

			<!-- #ifdefGIA_SUPPORT_ALIASES_RELEX_COMPATIBILITY -->
			<function name="redistributeRelexRelationsCollapseSubjectAndObjectGenerateAppos">
				<example><!--
				She is the one. _subj(be[2], she[1]) + _obj(be[2], one[4]) -> appos(She-1, one-4)
				Bikes are machines. _subj(be[2], bike[1]) + _obj(be[2], machine[3]) -> appos(bike-1, machine-3)
				That is Jim. _subj(be[2], that[1]) + _obj(be[2], Jim[3]) -> appos(that-1, Jim-3)
				The time is 06:45. _subj(be[3], time[2]) + _obj(be[3], 06:45[4]) -> appos(time-2, 06:45-4)
				...
				Kane is late. No change required (Relex parses this correctly)
					_predadj(Kane[1], late[3])
				She is the one.
					_subj(be[2], she[1]) + _obj(be[2], one[4]) -> appos(She-1, one-4)
				The girl is tall. No change required (Relex parses this correctly)
					_predadj(girl[2], tall[4])
				Bikes are machines.
					_obj(be[2], machine[3]) + _subj(be[2], bike[1]) -> appos(bike-1, machine-3)
				The wheels are green. No change required (Relex parses this correctly)
					_predadj(wheel[2], green[4])
				That is Jim.
					_subj(be[2], that[1]) + _obj(be[2], Jim[3]) + -> appos(that-1, Jim-3)
				The time is 06:45.
					_subj(be[3], time[2]) + _obj(be[3], 06:45[4]) + -> appos(time-2, 06:45-4)
				--></example>

				<example><!--Also deal with special case queries (required to support aliasing / consistency with Stanford parser)
				What is the time? _subj(be[2], _$qVar[1]) + _obj(be[2], time[4]) -> appos(time[4], $qVar[1])
				Who is that? _subj(be[2], _$qVar[1]) + _obj(be[2], that[3]) -> appos(that[3], _$qVar[1])
				What time is it? _subj(be[3], time[2]) + _obj(be[3], it[4]) -> appos(time[2], $qVar[4])
					note query comparison node used to be identified via identifyComparisonVariableAlternateMethod()
				--></example>

				<!-- #ifdefGIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY -->
				<example><!--
				What is the time? _subj(be[2], _$qVar[1]) + _obj(be[2], time[4]) -> appos(time[4], $qVar[1])
				Who is that? _subj(be[2], _$qVar[1]) + _obj(be[2], that[3]) -> appos(that[3], _$qVar[1])
				--></example>
				<!-- #ifndefGIA_DEPENDENCY_RELATIONS_TYPE_RELEX_PARSE_QUESTIONS_IN_NON_QUERY_INPUTTEXT -->
				<assert variable="isQuestion" />
				<!-- #endif -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="_$qVar" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				</paramDepRel>
				<!-- #endif -->

				<example><!--
				What time is it? _subj(be[3], time[2]) + _obj(be[3], it[4]) -> appos(time[2], $qVar[3]) <!-- NB appos has to use Be/$qVar[3] - it cannot use a) it/$qVar[4] for grammatical reasons [as "it" is tagged as a noun/definite], and cannot use b) What/$qVar[1] since it is not referenced by any relex dependency relation
					note query comparison node used to be identified via identifyComparisonVariableAlternateMethod())
				--></example>
				<!-- #ifndefGIA_DEPENDENCY_RELATIONS_TYPE_RELEX_PARSE_QUESTIONS_IN_NON_QUERY_INPUTTEXT -->
				<assert variable="isQuestion" />
				<!-- #endif -->
				<paramDepRel mode="redistribute">
				<assert variable="whichOrWhatQueryFound" />
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="it" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<!-- NB appos has to use Be/$qVar[3] - it cannot use a) it/$qVar[4] for grammatical reasons [as "it" is definite, assigned as a noun, etc], and cannot use b) What/$qVar[1] since it is not referenced by any relex dependency relation -->
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityReassignment="_$qVar" /> <!-- convert "be" -> "$qvar" -->
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="2" REL_ENT="2" disableEntityUseOriginalValues="true" /> <!-- oldRedundantItEntity -->
				<option disableEntityUseOriginalValues="true" REL="2" REL_ENT="2" />
				</paramDepRel>

				<example><!--
				She is the one. _subj(be[2], she[1]) + _obj(be[2], one[4]) -> appos(She-1, one-4)
				Bikes are machines. _subj(be[2], bike[1]) + _obj(be[2], machine[3]) -> appos(bike-1, machine-3)
				That is Jim. _subj(be[2], that[1]) + _obj(be[2], Jim[3]) -> appos(that-1, Jim-3)
				The time is 06:45. _subj(be[3], time[2]) + _obj(be[3], 06:45[4]) -> appos(time-2, 06:45-4)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="be" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_appo" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="1" /> <!-- oldRedundantBeEntity -->
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_SUPPORT_WHO_QUERY_ALIAS_ANSWERS -->
			<function name="redistributeRelexRelationsDetectNameQueries">
				<paramEntity mode="redistribute">
				<assert variable="firstWordOfSentenceIsWho" />
				<option useEntityTest="true" entityTest="_$qVar" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isNameQuery" value="true" />
				</paramEntity>
			</function>
			<!-- #endif -->

			<!-- #ifdefGIA_TRANSLATOR_INTERPRET_OF_AS_OBJECT_FOR_CONTINUOUS_VERBS -->
			<function name="redistributeRelexRelationsInterpretOfAsObjectForContinuousVerbs">
				<!-- eg1 Yarn is used in the making of cloth. of(making[6], cloth[8]) + in(use[3], making[6]) -> _obj(making[6], _cloth[8]) -->
				<!-- eg2 What is yarn used in the making of? interpret of(making[7], of[8]) + _obj(of[8], _$qVar[1]) -> _obj(making[7], _$qVar[1]) -->

				<!-- eg Yarn is used in the making of cloth. of(making[6], cloth[8]) + in(use[3], making[6]) -> _obj(making[6], _cloth[8]) -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="of" />
				<!-- <option relationTestSpecialCaseContinousVerb="true" REL="1" REL_ENT="1" /> -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="2" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="0" REL="1" REL_ENT="1" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="_$qVar" relationTestIsNegative="true" />	<!-- added 31 Aug 2013 -->
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="1" relationIndexTestEntityID="2" relationIndexTestIsNegative="true" /> <!-- added 31 Aug 2013 -->	
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="of" relationTestIsNegative="true" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="2" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				</paramDepRel>

				<!-- eg What is wood used in the delivering of? interpret of(making[7], of[8]) + _obj(of[8], _$qVar[1]) -> _obj(making[7], _$qVar[1]) -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="of" />
				<!-- <option relationTestSpecialCaseContinousVerb="true" REL="1" REL_ENT="1" /> -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="2" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="0" REL="1" REL_ENT="1" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="of" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="of" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="_$qVar" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>
				
				<!-- removed 31 Aug 2013 -->		
				<!--	
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_obj" /> //assuming it has been overwritten with object via execution of paramA
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="2" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="0" REL="1" REL_ENT="1" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="of" />
				<option useRelationTest="true" REL="2" REL_ENT="1" relationTest="of" />
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="_$qVar" />
				<option useRedistributeRelationEntityReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityReassignment="_obj" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>	
				-->			

			</function>
			<!-- #endif -->

			<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1B_RELATIONS_TREAT_ADVERB_PLUS_OBJECT_PLUS_SUBJECT_RELATION_WHERE_ADVERB_HAS_SAME_ARGUMENT_AS_SUBJECT_AS_CONDITION -->
			<function name="redistributeRelexRelationsAdverbPlusObjectPlusSubjectRelationWhereAdverbHasSameArgumentAsSubjectAsCondition">
				<!-- #ifdefGIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_BEING_OR_HAVING_INTO_A_CONDITION_DEFINITION -->
				<example><!--eg1; Space is saved by having a chicken. _subj(have[5], by[4]) + _obj(have[5], chicken[7]) + _advmod(save[3], by[4]) -> dobj(have[5], chicken[7]) + prep_by(save[3], have[5]) {required for interpretation by linkHavingPropertyConditionsAndBeingDefinitionConditions}
				_subj(have[5], by[4])
				_obj(have[5], chicken[7])
				_advmod(save[3], by[4])
				_obj(save[3], space[1]) [IRRELEVANT]
				--></example>
				<example><!--eg2; Space is saved by being a chicken. _subj(be[5], by[4]) + _obj(be[5], chicken[7] + _advmod(save[3], by[4]) -> dobj(be[5], chicken[7]) + prep_by(save[3], be[5]) {required for interpretation by linkHavingPropertyConditionsAndBeingDefinitionConditions}
				_subj(be[5], by[4])
				_obj(be[5], chicken[7])
				_advmod(save[3], by[4])
				_obj(save[3], space[1]) [IRRELEVANT]
				--></example>
				<example><!--eg3; Space is saved by moving a chicken. _subj(move[5], by[4]) + _obj(move[5], chicken[7]) + _advmod(save[3], by[4]) -> -> dobj(move[5], chicken[7]) + prep_by(save[3], move[5])
				_subj(move[5], by[4])
				_obj(move[5], chicken[7])
				_advmod(save[3], by[4])
				_obj(save[3], space[1]) [IRRELEVANT]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_advmod" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="2" relationIndexTestRelationID="3" relationIndexTestEntityID="2" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="3" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
				<!-- #endif -->
			</function>
			<!-- #endif -->

			<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1A_RELATIONS_DISREGARD_REDUNDANT_DEFINITION_RELATIONS -->
			<function name="redistributeRelexRelationsDisregardRedundantDefinitionRelations">
				<example><!--
				Eg; What are the patent claims on? _subj(be[2], claim[5]) + _obj(on[6], _$qVar[1]) -> on(claim[5], _$qVar[1])
				_subj(be[2], claim[5])
				_obj(on[6], _$qVar[1])
				_advmod(be[2], on[6]) + on(be[2], on[6]) [DUPLICATE INFO: IGNORE]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_advmod" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="2" />
				<option useRelationTest="true" REL="1" REL_ENT="1" relationTest="be" />
				<option disableRelation="true" REL="1" />
				<option disableRelation="true" REL="3" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="3" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
				<!-- #ifdefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1C_RELATIONS_TREAT_TODO_AND_SUBJECT_RELATION_AS_SUBSTANCE_LINK -->
				<!-- #endif -->
			</function>
			<!-- #endif -->

			<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1B_RELATIONS_TREAT_ADVERB_PLUS_SUBJECT_RELATION_AS_ACTION_CONDITION -->
			<function name="redistributeRelexRelationsAdverbPlusSubjectRelationAsActionCondition">
				<example><!--eg 1 Space is saved by running fast. _subj(run[5], by[4]) + _advmod(save[3], by[4]) -> by(save[3], run[5])
				_subj(run[5], by[4])
				_advmod(save[3], by[4])
				_obj(save[3], space[1]) [NOT MODIFIED]
				_advmod(run[5], fast[6]) [NOT MODIFIED + IRRELEVANT]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_advmod" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_obj" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="2" relationIndexTestRelationID="2" relationIndexTestEntityID="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				</paramDepRel>

				<example><!--eg 2 What is the Co-cart designed for? _obj(for[6], _$qVar[1]) + _advmod(design[5], for[6]) -> for(design[5], _$qVar[1])
				_obj(for[6], _$qVar[1])
				_advmod(design[5], for[6])
				_obj(design[5], Co[4]) [NOT MODIFIED]
				for(design[5], _$qVar[1]) [NOT MODIFIED + IRRELEVANT]
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="3" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_advmod" />
				<option useRelationTest="true" REL="3" REL_ENT="3" relationTest="_obj" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="3" relationIndexTestEntityID="1" />
				<option disableRelation="true" REL="1" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="2" REL_ENT="3" redistributeRelationEntityIndexReassignmentRelationID="2" redistributeRelationEntityIndexReassignmentRelationEntityID="2" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				</paramDepRel>
			</function>
			<!-- #endif -->


			<function name="switchArgumentsAndFunctionsWhereNecessaryRelex">
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="that" />
				<option useRedistributeRelationEntityReassignment="true" REL="1" REL_ENT="3" redistributeRelationEntityReassignment="_that" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_that" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_subj" relationArrayTestSize="1" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="2" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="1" redistributeRelationEntityIndexReassignmentUseOriginalValues="true" />
				<option useRedistributeRelationEntityIndexReassignment="true" REL="1" REL_ENT="1" redistributeRelationEntityIndexReassignmentRelationID="1" redistributeRelationEntityIndexReassignmentRelationEntityID="2" />
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_REDISTRIBUTE_RELATIONS_SUPPORT_WHAT_IS_THE_NAME_NUMBER_OF_QUERIES -->
			<function name="redistributeRelexRelationsCreateQueryVarsWhatIsTheNameNumberOf">
				<example><!--interpret;
					[given 'The name of the dog near the farm is Max.']
					'What is the name of the red dog near the farm?' [return entity names]
						? -> appos(dog[8], _$qVar[1]) {_name(dog[8], _$qVar)??}
					'What is the dog's name?'
						? -> appos(dog[8], _$qVar[1])
					'What is the number of the red dogs near the farm?' [return entity number/quantity]
						? -> _quantity(dog[8], _$qVar[1])
				--></example>
			</function>
			<!-- #endif -->

			<!-- #ifdefGIA_REDISTRIBUTE_RELATIONS_SUPPORT_NAME_OF -->
			<function name="redistributeRelexRelationsInterpretNameOfAsDefinition">
				<example><!--
				eg interpret 'The red dog's name is Max.'		? -> appos(dog-3, Max-7)
				eg interpret 'The name of the red dog is Max.' ? -> appos(dog-3, Max-7)
				eg interpret 'Max is the name of the red dog.' ? -> appos(dog-3, Max-7)
				--></example>
			</function>
			<!-- #endif -->
			
			<!-- NLC Only (testing) -->
			<function name="NLCredistributeRelexRelationsDisableRedundantObjectRelations">
				<example><!--
				eg Tom rides the Max's blue bike near the garage
				near(ride[2], garage[10])
				_obj(near[8], garage[10])	<- disable this relation
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj|_obj" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="3" relationIndexTestRelationID="1" relationIndexTestEntityID="1" /> <!-- check apparent "action" is not also a preposition - added 15 Sept 2013 for Relex parsing of "Tom rides the Max's blue bike near the garage."-->
				<option disableRelation="true" REL="1" />
				</paramDepRel>
			</function>					
		</file>
		<file name="GIAtranslatorDefineSubstances">
			<function name="defineSubstancesObjectsAndSubjectsWithSubstances">
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isObjectTemp" value="true" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isSubjectTemp" value="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="hasSubstanceTemp" value="true" />
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>
			
			<function name="defineSubstancesExpletives">
				<!-- eg There is _expl(be[2], there[1]) [Relex] / expl(is-2, There-1) [stanford] -->
				<!-- #ifdefGIA_INTERPRET_EXPLETIVE_AS_SUBJECT_OF_ACTION -->
				<!--
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_expl" />
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				</paramDepRel>
				-->
				<!-- #else -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_expl" />
				<option disableEntity="true" REL="1" REL_ENT="2" />
				<option disableEntity="true" REL="1" REL_ENT="1" />
				</paramDepRel>
				<!-- #endif -->
			</function>

			<!-- #ifdefGIA_CREATE_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS -->
			<function name="defineSubstancesAllNodes">
				<paramEntity mode="execute">
				<option useEntityTest="true" entityTest="_$qVar" entityTestIsNegative="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isConcept" value="true" />
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>
			<!-- #endif -->
			
			<function name="defineSubstancesDefiniteNouns">
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isPronounReference" value="false" />
				<!-- #ifndefGIA_ASSIGN_SUBSTANCE_TO_PROPER_NOUNS -->
				<!-- <specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="false" /> -->
				<!-- #endif -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalIndefinitePlural" value="true" />
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>

			<function name="defineSubstancesBasedOnDeterminatesOfDefinitionEntities">

				<example><!-- Added 09 August 2012
				The bat is an animal - (definition connection, bat = substance, animal = concept) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_1_GOVERNOR_DEFINITE_DEPENDENT_INDEFINITE [assumes defineSubstancesDefiniteNouns() executed]
					eg2; The red bat is a zenomorph. The blue bat is a non-zenomorph.
					NO: definite implies animal is an adjective/quality [check NLP]
				Bats are animals. (definition connection, bat = concept, animal = concept) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_2_GOVERNOR_PLURAL_DEPENDENT_PLURAL
				A book is an animal (definition connection, bat = concept, animal = concept) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_3_GOVERNOR_INDEFINITE_DEPENDENT_INDEFINITE
				Bat is an animal. (definition connection, bat = concept or substance [if ] with isName==true, animal = concept) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_4_GOVERNOR_NAME_DEPENDENT_INDEFINITE
				The bat is Max. (double definition connection, bat = substance, animal = concept or substance [if ] with isName==true) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_5_GOVERNOR_DEFINITE_DEPENDENT_NAME [assumes defineSubstancesDefiniteNouns() executed]
				Bat is the animal. (double definition connection, bat = concept or substance [if ] with isName==true, animal = substance) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_6_GOVERNOR_NAME_DEPENDENT_DEFINITE
				That is Jim. (double definition connection, that = substance, Jim = concept or substance [if ]) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_7_GOVERNOR_INDEFINITE_DEPENDENT_NAME
				Max is Jim. (double definition connection, Max = concept or substance [if ], Jim = concept or substance [if ]) GIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES_CASE_8_GOVERNOR_NAME_DEPENDENT_NAME // case added 14 October 2012
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="alreadyAssignedSubstancesBasedOnDeterminatesOfDefinitionEntitiesTemp" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="alreadyAssignedSubstancesBasedOnDeterminatesOfDefinitionEntitiesTemp" value="true" REL="1" REL_ENT="2" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalNumber" value="2" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalIndefinitePluralTemp" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="alreadyAssignedSubstancesBasedOnDeterminatesOfDefinitionEntitiesTemp" value="false" REL="1" REL_ENT="1" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalNumber" value="2" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="false" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalIndefinitePluralTemp" value="false" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="true" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="alreadyAssignedSubstancesBasedOnDeterminatesOfDefinitionEntitiesTemp" value="false" REL="1" REL_ENT="2" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalNumber" value="2" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalIndefinitePluralTemp" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="mustSetIsSubstanceConceptBasedOnApposRelation" value="true" REL="1" REL_ENT="1" />
				</paramDepRel>

				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalNumber" value="2" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="false" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalIndefinitePluralTemp" value="false" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="false" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="mustSetIsSubstanceConceptBasedOnApposRelation" value="true" REL="1" REL_ENT="2" />
				</paramDepRel>
			</function>

			<function name="defineSubstancesNounsWithDeterminates">
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isPronounReference" value="false" />
				<!-- #ifndefGIA_ASSIGN_SUBSTANCE_TO_PROPER_NOUNS -->
				<!-- <specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="false" /> -->
				<!-- #endif -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalNumber" value="2" />
				<!-- #ifdefGIA_DEFINE_SUBSTANCES_BASED_UPON_DETERMINATES_OF_DEFINITION_ENTITIES -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="alreadyAssignedSubstancesBasedOnDeterminatesOfDefinitionEntitiesTemp" value="false" />
				<!-- #endif -->
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>


			<function name="defineSubstancesNounsWithAdjectivesOrPrenominalModifiers">
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_amod|_advmod" relationArrayTestSize="2" />
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				</paramDepRel>

				<!-- #ifdefGIA_TRANSLATOR_DEFINE_NOUNS_WITH_PRENOMINAL_MODIFIERS_AS_SUBSTANCES -->
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_nn" relationArrayTestSize="1" />
				<option functionToExecuteUponFind="1" />
				<!-- #ifdefGIA_TRANSLATOR_INTERPRET_PRENOMINAL_MODIFIER_DEPENDENT_AS_SUBSTANCE_INSTEAD_OF_GOVERNOR -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<!-- #else -->
				<!-- <option functionEntityRelationID="2" FUNC_ENT="1" functionEntityRelationEntityID="2" /> -->
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->
			</function>

			<function name="defineSubstancesQuantitiesAndMeasures">
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_quantity|_measure_distance|_measure_size|_measure_time|_measure" relationArrayTestSize="5" />
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				</paramDepRel>
			</function>

			<function name="defineSubstancesQuantityModifiers">
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_quantity_mod|_measure_per|_measure_dependency" relationArrayTestSize="3" />
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				</paramDepRel>
			</function>

			<function name="defineSubstancesPronouns">
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isPronounReference" value="false" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalPronounTemp" value="true" />
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>

			<function name="defineSubstancesToBe">
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-be" />
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				</paramDepRel>
			</function>

			<function name="defineActionsToDo">
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option functionToExecuteUponFind="2" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				</paramDepRel>
			</function>

			<function name="defineSubstancesHasTime">
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="hasAssociatedTime" value="true" />
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>

			<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1F_RELATIONS_TREAT_THAT_AS_A_PRONOUN_IE_SUBSTANCE -->
			<function name="defineSubstancesNonExplicitPronouns">
				<paramEntity mode="execute">
				<option useEntityArrayTest="true" entityArrayTest="that" entityArrayTestSize="1" />
				<!-- #ifdefGIA_TREAT_THAT_AS_A_PRONOUN_IE_SUBSTANCE_ASSIGN_DETERMINATE_SINGULAR -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="grammaticalNumber" value="2" /> <!-- added 14 August 2012 (select any value from referenceTypeHasDeterminateCrossReferenceNumberArray[]) -->
				<!-- #endif -->
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>
			<!-- #endif -->

			<function name="defineSubstancesIndirectObjects">
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_iobj" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="2" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_SUPPORT_SPECIFIC_SUBSTANCE_CONCEPTS -->
			<function name="defineSubstanceConcepts">
				<paramEntity mode="redistribute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="1" />
				<!-- #ifdefGIA_ADVANCED_REFERENCING_DO_NOT_REAPPLY_IS_SUBSTANCE_CONCEPT_TO_REFERENCES -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="wasReference" value="false" />
				<!-- #endif -->
				<!-- #ifndefGIA_SUPPORT_SPECIFIC_CONCEPTS_ASSIGN_TO_PRONOUNS -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalPronounTemp" value="false" />
				<!-- #endif -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalNumber" value="2" negative="true" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalDefiniteTemp" value="false" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalIndefinitePluralTemp" value="false" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="false" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isSubstanceConcept" value="true" />
				</paramEntity>

				<paramEntity mode="redistribute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="1" />
				<!-- #ifdefGIA_ADVANCED_REFERENCING_DO_NOT_REAPPLY_IS_SUBSTANCE_CONCEPT_TO_REFERENCES -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="wasReference" value="false" />
				<!-- #endif -->
				<!-- #ifndefGIA_SUPPORT_SPECIFIC_CONCEPTS_ASSIGN_TO_PRONOUNS -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalPronounTemp" value="false" />
				<!-- #endif -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="mustSetIsSubstanceConceptBasedOnApposRelation" value="true" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isSubstanceConcept" value="true" />
				</paramEntity>

				<!-- #ifdefGIA_SUPPORT_SPECIFIC_CONCEPTS_ASSIGN_TO_PRONOUNS -->
				<!--
				<paramEntity mode="redistribute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="1" />
				// #ifdefGIA_ADVANCED_REFERENCING_DO_NOT_REAPPLY_IS_SUBSTANCE_CONCEPT_TO_REFERENCES
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="wasReference" value="false" />
				// #endif
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalPronounTemp" value="true" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isSubstanceConcept" value="true" />
				</paramEntity>
				-->
				<!-- #endif -->

				<!-- #ifdefGIA_SUPPORT_SPECIFIC_CONCEPTS_ASSIGN_TO_PROPERNOUNS -->
				<!--
				<paramEntity mode="redistribute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="1" />
				// #ifdefGIA_ADVANCED_REFERENCING_DO_NOT_REAPPLY_IS_SUBSTANCE_CONCEPT_TO_REFERENCES
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="wasReference" value="false" />
				// #endif
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalProperNounTemp" value="true" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isSubstanceConcept" value="true" />
				</paramEntity>
				-->
				<!-- #endif -->
			</function>
			<!-- #endif -->

			<function name="defineSubstancesOfPossessivePrepositions">
				<example><!--
				eg _to-be(grow[2], tired[3])
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-be" />
				<!-- <option useRedistributeSpecialCaseIsToBeComplimentOfActionTempAssignment="true" REL="1" REL_ENT="2" /> -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isToBeComplimentOfActionTemp" value="true" REL="1" REL_ENT="2" />
				</paramDepRel>

				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="of" relationArrayTestSize="1" />
				<!-- <option relationTestSpecialCaseIsNotAction="true" REL="1" REL_ENT="1" />
				<!-- <option relationTestSpecialCaseIsNotToBeComplimentOfAction="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isAction" value="false" REL="1" REL_ENT="1" /> <!-- Stanford Condition -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isToBeComplimentOfActionTemp" value="false" REL="1" REL_ENT="1" /> <!-- Relex Condition -->
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				</paramDepRel>
			</function>

			<function name="defineSubstancesActions">
				<example><!--
				eg 'run' in 'Tom runs' _subj(run[2], Tom[1])
				#ifdefGIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC
				exceptions required for linkHavingPropertyConditionsAndBeingDefinitionConditions():
					'having a chicken'/being a chicken': dobj(having-5, chicken-7) / dobj(be-5, chicken-7)]
				#endif
				no exceptions required for linkSubjectObjectRelationships(); this will cause no problems:
						eg The rabbit is 20 meters away. _subj(away[6], rabbit[2]) + _measure_distance(away[6], meter[5]) [away is a substance of rabbit, not a condition of rabbit]
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj|_obj" relationArrayTestSize="2" />
				<!-- #ifdefGIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
				<!-- <option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="have|be" relationArrayTestSize="2" relationArrayTestIsNegative="true" />  //exceptions required for linkHavingPropertyConditionsAndBeingDefinitionConditions() -->
				<!-- #endif -->
				<option functionToExecuteUponFind="1" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_SUPPORT_SPECIFIC_ACTION_CONCEPTS -->
			<function name="defineSubstancesActionConcepts">
				<example><!--
				eg 'swim' in 'To swim to the beach requires strength.'
				--></example>
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="grammaticalWordTypeTemp" value="2" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="0" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="3" />
				<option functionToExecuteUponFind="1" />
				</paramEntity>
			</function>
			<!-- #endif -->		
		</file>
		<file name="GIAtranslatorLinkEntities">
			<function name="linkPropertiesPossessiveRelationships">
				<example><!--
				Joe's bike is blue.	_poss(bike[3], Joe[1])
				--></example>
				<!-- #ifdef GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
				<!--
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_poss" relationArrayTestSize="1" />
				<option functionToExecuteUponFind="3" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				// #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				// #endif
				</paramDepRel>
				-->
				<!-- #else -->
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_poss" relationArrayTestSize="1" />
				<option mustGenerateConditionName="true" conditionEntityDefaultName="have" mustGenerateConditionEntityIndex="true" />
				<option functionToExecuteUponFind="5" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->
				
				<!-- #ifdefGIA_TRANSLATOR_INTERPRET_PRENOMINAL_MODIFIER_DEPENDENT_AS_SUBSTANCE_INSTEAD_OF_GOVERNOR -->
				<example><!--
				Hamish smoked at the toy shop. _nn(shop[6], toy[5])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_nn" relationArrayTestSize="1" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->
			</function>

			<function name="linkPropertiesDescriptiveRelationships">
				<example><!--
				Joe is happy. _predadj(Joe[1], happy[3]) [NB Stanford nsubj(happy-3, Joe-1) + cop(happy-3, is-2) gets redistributed to _predadj(Joe[1], happy[3])]
				--></example>
				
				<!-- #ifdefGIA_ADVANCED_REFERENCING_FIND_SUBJ_OBJ_RELATION_MATCHING_AUXILIARY_AND_SET_NOT_SAME_REFERENCE_SET -->
				<!--
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_amod|_predadj|_advmod" relationArrayTestSize="3" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				</paramDepRel>
				-->
				<!-- #else -->
				
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_amod|_advmod" relationArrayTestSize="2" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
				
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_predadj" relationArrayTestSize="1" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				</paramDepRel>								
				
				<!-- #endif -->
			</function>

			<function name="linkEntityDefinitionsAppositiveOfNouns">
				<example><!--
				The fish, a carp, swam deeply. _appo(fish[2], carp[5])
				--></example>
				<paramDepRel mode="execute">
				<!-- #ifdefGIA_TRANSLATOR_ONLY_MERGE_ENTITY_NODES_WHEN_LINK_PREESTABLISHED_REFERENCES_GIA -->
				<!-- <assert variable="linkPreestablishedReferencesGIA" /> -->
				<!-- #endif -->
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isSubstance" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isNameQuery" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOr2Vector" variable="isSubstance" value="true" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestOr2Vector" variable="isNameQuery" value="true" REL="1" REL_ENT="2" />
				<!-- #ifdefGIA_SUPPORT_SPECIFIC_SUBSTANCE_CONCEPTS -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isSubstanceConcept" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isSubstanceConcept" value="false" REL="1" REL_ENT="2" />
				<!-- #endif -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="hasAssociatedTime" value="false" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestOr3Vector" variable="grammaticalProperNounTemp" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOr3Vector" variable="isNameQuery" value="true" REL="1" REL_ENT="1" />
				<option disableRelationDuringLink="true" REL="1" />
				<!-- #ifdefGIA_DISABLE_ALIAS_ENTITY_MERGING -->
				<option functionToExecuteUponFind="14" />
				<!-- #else -->
				<!-- <option functionToExecuteUponFind="12" /> -->
				<!-- #endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				</paramDepRel>

				<paramDepRel mode="execute">
				<!-- #ifdefGIA_TRANSLATOR_ONLY_MERGE_ENTITY_NODES_WHEN_LINK_PREESTABLISHED_REFERENCES_GIA -->
				<!-- <assert variable="linkPreestablishedReferencesGIA" /> -->
				<!-- #endif -->
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isSubstance" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isNameQuery" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestOr2Vector" variable="isSubstance" value="true" REL="1" REL_ENT="2" />
				<specialCase type="specialCaseCharacteristicsTestOr2Vector" variable="isNameQuery" value="true" REL="1" REL_ENT="2" />
				<!-- #ifdefGIA_SUPPORT_SPECIFIC_SUBSTANCE_CONCEPTS -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isSubstanceConcept" value="false" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isSubstanceConcept" value="false" REL="1" REL_ENT="2" />
				<!-- #endif -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="hasAssociatedTime" value="false" REL="1" REL_ENT="2" />
				<option disableRelationDuringLink="true" REL="1" />
				<!-- #ifdefGIA_DISABLE_ALIAS_ENTITY_MERGING -->
				<option functionToExecuteUponFind="14" />
				<!-- #else -->
				<!-- <option functionToExecuteUponFind="12" /> -->
				<!-- #endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				</paramDepRel>

				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_appo" />
				<option functionToExecuteUponFind="11" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				</paramDepRel>
			</function>

			<!-- Stanford Only -->
			<function name="linkDependentActionsType1">
				<example><!--
				To swim to the beach requires strength. csubj(requires-6, swim-2) + dobj(requires-6, strength-7)

					interpret as condition;
				To swim to the beach requires strength.
					csubj(requires-6, swim-2)
					dobj(requires-6, strength-7)
				To drive to the beach requires strength.
					csubj(requires-6, drive-2)
					dobj(requires-6, strength-7)
				--></example>
				<paramDepRel mode="execute">
				<assert variable="NLPdependencyRelationsTypeStanford" />
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_csubj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				<option disableRelationDuringLink="true" REL="2" /> <!-- required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013 -->
				</paramDepRel>
			</function>

			<!-- #ifdefGIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
			<!--
			<function name="linkHavingPropertyConditionsAndBeingDefinitionConditions">
				<example>
				Stanford;
				Space is saved through/by having a chicken. prepc_through/by(saved-3, having-5) + dobj(having-5, chicken-7) + nsubjpass(saved-3, Space-1) [IRRELEVANT] + auxpass(saved-3, is-2) [IRRELEVANT]
				Space is saved through/by being a chicken. prepc_through/by(saved-3, chicken-7) + cop(chicken-7, being-5) + nsubjpass(saved-3, Space-1) [IRRELEVANT] + auxpass(saved-3, is-2) [IRRELEVANT]
				Relex;
				Space is saved through/by having a chicken. prep_through/by(saved-3, having-5) + dobj(having-5, chicken-7) [check that through(save[3], chicken[7]) + _obj(save[3], space[1]) is first reduced by redistributeRelexRelationsAdverbPlusObjectPlusSubjectRelationWhereAdverbHasSameArgumentAsSubjectAsCondition]
				Space is saved through/by being a chicken. prep_through/by(saved-3, be-5) + dobj(be-5, chicken-7) [check that _obj(be[5], chicken[7]) + _to-do(through[4], be[5]) + _predadj(space[1], through[4]) is first reduced by redistributeRelexRelationsAdverbPlusObjectPlusSubjectRelationWhereAdverbHasSameArgumentAsSubjectAsCondition]
				</example>

				<example>
				Space is saved through/by having a chicken. prepc/prep_through/by(saved-3, having-5) + dobj(having-5, chicken-7) [note Relex currently fails to parse 'through having/being' but can parse 'by having/being']
				</example>
				<paramDepRel mode="execute">
				<option NLPdependencyRelationsType="NLPdependencyRelationsType" />
				<option numberOfRelations="2" />
				<option disableRelationDuringLink="true" REL="1" /> //required to prevent re-interpretation of prepositions in main preposition interpretation function linkConditions()
				<option disableRelationDuringLink="true" REL="2" /> //required to prevent re-interpretation of prepositions in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="by|through" relationArrayTestSize="2" />
				<option expectToFindPrepositionTest="true" REL="1" /> //redundant test (maintained for consistency only with old non- code)
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="1" FUNC_ENT="4" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="have" />
				<option functionToExecuteUponFind="10" />
				<option mustGenerateConditionEntityIndex="true" />
				//#ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetRelationID="2" defaultSameSetReferenceValue="true" />
				//#endif
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>

				<example>
				Space is saved through/by being a chicken. prep_through/by(saved-3, be-5) + dobj(be-5, chicken-7) [Relex Only - note Relex currently fails to parse 'through having/being' but can parse 'by having/being']
				</example>
				<paramDepRel mode="execute">
				<option NLPdependencyRelationsType="NLPdependencyRelationsType" />
				<option numberOfRelations="2" />
				<option disableRelationDuringLink="true" REL="1" /> //required to prevent re-interpretation of prepositions in main preposition interpretation function linkConditions()
				<option disableRelationDuringLink="true" REL="2" /> //required to prevent re-interpretation of prepositions in secondary action interpretation function linkSubjectOrObjectRelationships()
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="by|through" relationArrayTestSize="2" />
				<option expectToFindPrepositionTest="true" REL="1" /> //redundant test (maintained for consistency only with old non- code)
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="1" FUNC_ENT="4" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_obj" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="be" />
				<option functionToExecuteUponFind="9" />
				<option mustGenerateConditionEntityIndex="true" />
				//#ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetRelationID="2" defaultSameSetReferenceValue="true" />
				//#endif
				<option disableEntity="true" REL="1" REL_ENT="2" />
				</paramDepRel>

				<example>
				Space is saved through/by being a chicken. prepc_through/by(saved-3, chicken-7) + cop(chicken-7, being-5) [Stanford Only]
				</example>
				<paramDepRel mode="execute">
				<option NLPdependencyRelationsType="NLPdependencyRelationsType" />
				<option numberOfRelations="2" />
				<option disableRelationDuringLink="true" REL="1" /> //required to prevent re-interpretation of prepositions in main preposition interpretation function linkConditions()
				<option disableRelationDuringLink="true" REL="2" /> //required to prevent re-interpretation of prepositions in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="by|through" relationArrayTestSize="2" />
				<option expectToFindPrepositionTest="true" REL="1" /> //redundant test (maintained for consistency only with old non- code)
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="2" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" /> //coincidentially this condition holds for all 3 cases
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="4" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_cop" />
				<option parseDisabledRelation="true" REL="2" /> //copula will have been disabled, so must explicitly allow it to be parsed
				<option useRelationTest="true" REL="2" REL_ENT="2" relationTest="be" />
				<option functionToExecuteUponFind="9" />
				<option mustGenerateConditionEntityIndex="true" />
				//#ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetRelationID="2" defaultSameSetReferenceValue="true" />
				//#endif
				<option disableEntity="true" REL="2" REL_ENT="2" />
				</paramDepRel>
			</function>
			-->
			<!-- #endif -->
			
			<function name="linkIndirectObjects">
				<example><!--
				eg The officer gave the youth a ride. _iobj(give, youth) + _obj(give[3], ride[7])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_iobj" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option functionToExecuteUponFind="3" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
			</function>

			<function name="linkSubjectObjectRelationships">
				<example><!--special case A: partnerTypeObjectSpecialConditionMeasureDistanceOrStanfordFound
				eg The rabbit is 20 meters away. _subj(away[6], rabbit[2]) + _measure_distance(away[6], meter[5]) [away is a substance of rabbit, not a condition of rabbit]
				_subj(away[6], rabbit[2])
				_measure_distance(away[6], meter[5])
				--></example>
				<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_1E_RELATIONS_TREAT_UNQUALIFIED_RELATIONS_AS_CONDITIONS_ALSO -->
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_subj" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_measure_distance|_measure" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="false" /> <!-- CHECK THIS??? -->
				<!-- #endif -->
				<option disableRelationDuringLink="true" REL="1" /> <!-- required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013 -->
				</paramDepRel>
				<!-- #endif -->

				<!-- #ifdefGIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_BEING_EG_BEING_INTO_A_DEFINITION_BASIC -->
				<example><!--special case B: passdefinition [Relex only? Note Stanford produces different relations that get interpreted as appo]
				eg A bat is an animal. _subj(be[3], bat[2]) + _obj(be[3], animal[5])
				_obj(be[3], animal[5])
				_subj(be[3], bat[2])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option disableRelationDuringLink="true" REL="1" /> <!-- required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013 -->
				<option disableRelationDuringLink="true" REL="2" /> <!-- required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013 -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="be" relationArrayTestSize="1" />
				<option functionToExecuteUponFind="11" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				<option disableEntity="true" REL="1" REL_ENT="1" /> <!-- disable "be" entity -->
				</paramDepRel>
				<!-- #endif -->

				<!-- #ifdefGIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
				<!--
				<example>special case C: passcomposition [Relex and Stanford]
				eg1 Tom comprises happiness. _subj(comprise[2], Tom[1]) + _obj(comprise[2], happiness[3])
				_obj(comprise[2], happiness[3])
				_subj(comprise[2], Tom[1])
				eg2 The house has a table. _subj(have[3], house[2]) + _obj(have[3], table[5])
				_obj(have[3], table[5])
				_subj(have[3], house[2])
				</example>
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option disableRelationDuringLink="true" REL="1" /> //required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013
				<option disableRelationDuringLink="true" REL="2" /> //required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="contains|comprise|have" relationArrayTestSize="3" />
				<option functionToExecuteUponFind="3" />
				//#ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetReferenceValue="false" />
				//#endif
				//#ifndefGIA_USE_CORPUS_DATABASE
				//<option disableEntity="true" REL="1" REL_ENT="1" /> //disable "have" entity
				//#endif
				</paramDepRel>
				//#ifdefGIA_USE_CORPUS_DATABASE
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option disableRelationDuringLink="true" REL="1" />
				<option disableRelationDuringLink="true" REL="2" />
				<option functionEntityRelationID="2" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="contains|comprise|have" relationArrayTestSize="3" />
				<option functionToExecuteUponFind="13" />
				<option disableEntity="true" REL="1" REL_ENT="1" /> //disable "have" entity
				</paramDepRel>
				//#endif
				-->
				<!-- #endif -->
				
				<example><!--standard case D:
				eg1 Tom rides the bike. _subj(ride[2], Tom[1]) + _obj(ride[2], bike[4])
				_obj(ride[2], bike[4])
				_subj(ride[2], Tom[1])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj" relationArrayTestSize="1" />
				<option useRelationArrayTest="true" REL="2" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="1" relationIndexTestRelationID="2" relationIndexTestEntityID="1" />
				<option disableRelationDuringLink="true" REL="1" /> <!-- required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013 -->
				<option disableRelationDuringLink="true" REL="2" /> <!-- required to prevent action link from being created to object in secondary action interpretation function linkSubjectOrObjectRelationships() - added 17 July 2013 -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionToExecuteUponFind="5" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="false" />	<!-- defaultSameSetReferenceValues are handled by genericDependecyRelationInterpretation(); -->
				<!-- #endif -->
				</paramDepRel>
			</function>

			<function name="linkSubjectOrObjectRelationships">
				<example><!--
				Tom runs quickly. _subj(run[2], Tom[1])
				The bike was ridden. _obj(ride[4], bike[2])
				--></example>

				<example><!--
				Tom runs quickly. _subj(run[2], Tom[1])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="contains|comprise|has|have" relationArrayTestSize="4" relationArrayTestIsNegative="true" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="be" relationArrayTestSize="1" relationArrayTestIsNegative="true" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<option functionToExecuteUponFind="6" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_subj" relationArrayTestSize="1" />
				</paramDepRel>

				<example><!--
				The bike was ridden. _obj(ride[4], bike[2])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="contains|comprise|has|have" relationArrayTestSize="4" relationArrayTestIsNegative="true" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="1" relationArrayTest="be" relationArrayTestSize="1" relationArrayTestIsNegative="true" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<option functionToExecuteUponFind="7" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_obj|_that" relationArrayTestSize="2" />
				</paramDepRel>
			</function>

			<!-- is this still used by Stanford? [appears to be Relex only] -->
			<function name="linkObjectSubjectOfPreposition">
				<example><!--
				The garage is next to the house. _pobj(next_to, house) + _psubj(next_to, garage)
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_pobj" />
				<option useRelationTest="true" REL="2" REL_ENT="3" relationTest="_psubj" />
				<option useRelationIndexTest="true" REL="2" REL_ENT="1" relationIndexTestRelationID="1" relationIndexTestEntityID="1" />
				<option functionToExecuteUponFind="8" />
				<option mustGenerateConditionEntityIndex="true" /> <!-- shouldn't be required as conditionType corresponds to a relation subject or relation governor (rather than a relation type)  -->
				<option functionEntityRelationID="2" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="2" FUNC_ENT="3" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
			</function>

			<function name="linkConjunctionConditions">
				<example><!--
				Tom and/or Max eat the cake. conj_and(Tom[1], Max[3]) / conj_or(Tom[2], Max[4])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<!-- #ifndef GIA_CREATE_INDEPENDENT_CONJUNCTION_ENTITIES
				<option mustGenerateConditionEntityIndex="true" /> // shouldn't be required as conditionType is converted from "conj_and"/"conj_or" to "and"/"or" (which should be detected as features within the sentence)
				#endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj_and" />
				<option conditionEntityDefaultName="and" /> <!-- change the conditionType name (_conj_and -> and) -->
				</paramDepRel>

				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<!-- #ifndef GIA_CREATE_INDEPENDENT_CONJUNCTION_ENTITIES
				<option mustGenerateConditionEntityIndex="true" /> // shouldn't be required as conditionType is converted from "conj_and"/"conj_or" to "and"/"or" (which should be detected as features within the sentence)
				#endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj_or" />
				<option conditionEntityDefaultName="or" /> <!-- change the conditionType name (_conj_or -> or) -->
				</paramDepRel>
				
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<!-- #ifndef GIA_CREATE_INDEPENDENT_CONJUNCTION_ENTITIES
				<option mustGenerateConditionEntityIndex="true" /> // shouldn't be required as conditionType is converted from "conj_and"/"conj_or" to "and"/"or" (which should be detected as features within the sentence)
				#endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj_but" />
				<option conditionEntityDefaultName="but" /> <!-- change the conditionType name (_conj_but -> but) -->
				</paramDepRel>
				
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<!-- #ifndef GIA_CREATE_INDEPENDENT_CONJUNCTION_ENTITIES
				<option mustGenerateConditionEntityIndex="true" /> // shouldn't be required as conditionType is converted from "conj_and"/"conj_or" to "and"/"or" (which should be detected as features within the sentence)
				#endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj_yet" />
				<option conditionEntityDefaultName="yet" /> <!-- change the conditionType name (_conj_yet -> yet) -->
				</paramDepRel>
				
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<!-- #ifndef GIA_CREATE_INDEPENDENT_CONJUNCTION_ENTITIES
				<option mustGenerateConditionEntityIndex="true" /> // shouldn't be required as conditionType is converted from "conj_and"/"conj_or" to "and"/"or" (which should be detected as features within the sentence)
				#endif -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_conj_nor" />
				<option conditionEntityDefaultName="nor" /> <!-- change the conditionType name (_conj_nor -> nor) -->
				</paramDepRel>
			</function>

			
			<!-- NLC Only -->
			<function name="NLCinterpretWithAsPropertyWhenConnectedToSubstanceOnly">
				<example><!--
				eg The city with a house is fast.
					_predadj(city[2], fast[7])
					prep_with(city[2], house[5])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="with" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isAction" value="false" REL="1" REL_ENT="1" />
				<option disableRelationDuringLink="true" REL="1" />
				<option functionToExecuteUponFind="3" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<!-- #ifdefGIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR -->
				<option disableEntity="true" REL="1" REL_ENT="3" />
				<!-- #endif -->
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
			</function>
			
			<function name="linkConditions">
				<!-- #ifdefGIA_IGNORE_MEANINGLESS_RELATIONS -->
				<!-- NB with , meaningless relations are now disabled completely rather than just ignored -->
				<!-- to prevent meaningless relex relations; eg "on(be[2], on[6])" -->
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationIndexTest="true" REL="1" REL_ENT="3" relationIndexTestRelationID="1" relationIndexTestEntityID="2" />
				<option disableRelationDuringLink="true" REL="1" />
				</paramDepRel>
				<!-- #endif -->

				<!-- #ifdefGIA_TRANSLATOR_INTERPRET_OF_AS_POSSESSIVE_FOR_SUBSTANCES -->
				<!-- #ifndefGIA_DO_NOT_SUPPORT_SPECIAL_CASE_3A_PREPOSITIONS_INTERPRET_PREPOSITION_OF_AS_EITHER_CONDITION_OR_SUBSTANCE_LINK_DEPENDING_UPON_ACTION_OR_SUBSTANCE -->
				<example><!--
				Interpret "of" preposition as property
				NB this case "The house of Kriton is blue." should create 2 substance connections (not just 1)
				of(house[2], Kriton[4])
				_predadj(house[2], blue[6])
				--></example>
				<example><!--but ignore cases where the subject of the preposition is an action;
				NB not in this case "She grew tired of the pie."
				Relex:
				of(tired[3], pie[6])
				_to-be(grow[2], tired[3])
				_subj(grow[2], she[1])
				Stanford:
				prep_of(grew-2, pie-6)
				acomp(grew-2, tired-3)
				nsubj(grew-2, She-1)
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="of" relationArrayTestSize="1" />
				<!-- <option relationTestSpecialCaseIsNotAction="true" REL="1" REL_ENT="1" />
				<!-- <option relationTestSpecialCaseIsNotToBeComplimentOfAction="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isAction" value="false" REL="1" REL_ENT="1" /> <!-- Stanford Condition -->
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isToBeComplimentOfActionTemp" value="false" REL="1" REL_ENT="1" /> <!-- Relex Condition -->
				<option disableRelationDuringLink="true" REL="1" /> <!-- required to prevent re-interpretation of prepositions in main preposition interpretation function linkConditions -->
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->
				<!-- #endif -->

				<example><!--standard preposition;
				Joe is sad at the park. at(sad[3], park[6])
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option NLPdependencyRelationsType="NLPdependencyRelationsType" /> <!-- this is required for expectToFindPrepositionTest -->
				<option expectToFindPrepositionTest="true" REL="1" />
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<option mustGenerateConditionEntityIndex="true" /> <!-- may be required as conditionType corresponds to a relation type (not relation subject or relation governor) [assuming a corresponding feature index for the relation type cannot be found in the feature array] -->
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				</paramDepRel>

				<!-- interpret $qVar relationTypes as conditions: -->
				<!-- this code should only be required for 'how' qvar, because the other qvars should be detected within one of the above loops -->
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option NLPdependencyRelationsType="NLPdependencyRelationsType" /> <!-- PROBABLYNOTREQUIRED: this is required for expectToFindPrepositionTest -->
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<option mustGenerateConditionEntityIndex="true" /> <!-- may be required as conditionType corresponds to a relation type (not relation subject or relation governor) [assuming a corresponding feature index for the relation type cannot be found in the feature array] -->
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_%atTime|_%atLocation|_%because|_%how" relationArrayTestSize="4" relationArrayTestIsNegative="false" />
				</paramDepRel>
			</function>

			<!-- Stanford Only -->
			<function name="linkDependentActionsType2">
				<example><!--
				eg To copy the files[, ]create a backup of the old file.
					use dep tag to connect dependent actions (interpret as condition - invent one)
					dep(create-6, copy-2)
				--></example>
				<paramDepRel mode="execute">
				<assert variable="NLPdependencyRelationsTypeStanford" />
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_dep" /> <!-- check this implementation is not conficting with any stanford dependency relation reductions as defined in "_dep" -->
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isAction" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="isAction" value="true" REL="1" REL_ENT="2" />
				<option mustGenerateConditionName="true" conditionEntityDefaultName="involves" mustGenerateConditionEntityIndex="true" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetRelationID="1" defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				</paramDepRel>
			</function>		
		</file>
		<file name="GIAtranslatorApplyAdvancedFeatures">
			<!-- #ifndef GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC -->
			<function name="collapseRedundantRelationAndMakeNegativeStanford">
				<example>
				<!-- eg The chicken has not eaten a pie.: neg(eaten-5, not-4) -->
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_neg" />
				<option disableRelation="true" REL="1" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="negative" value="true" REL="1" REL_ENT="1" />
				</paramDepRel>
			</function>	
			<!-- #endif -->	
			<function name="extractMeasures">
				<example><!--
				eg The boy is 4 feet away. / Take these 4 times a day. / The boy is 4 feet tall. / The birthday boy is 12 years old. _measure_distance(away, foot) / _measure_per(times, day) / _measure_size(tall, feet) / _measure_time(old, years)
				--></example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" /> <!-- coincidentially this condition holds for both cases -->
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" /> <!-- coincidentially this condition holds for both 3 cases -->
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_measure_per|_measure_dependency" relationArrayTestSize="2" />
				<option mustGenerateConditionName="true" conditionEntityDefaultName="_measure_dependency" mustGenerateConditionEntityIndex="true" /> <!-- NB does not support the full array of Relex measure/dependency types, and ((1000)-6) is now used instead of ((1000)-7) to allow both measure and measure per entities to be used in same sentence -->
				</paramDepRel>

				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" /> <!-- coincidentially this condition holds for both cases -->
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" /> <!-- coincidentially this condition holds for both 3 cases -->
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" />
				<!-- #endif -->
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_measure_distance|_measure_size|_measure_time|_measure" relationArrayTestSize="4" />
				<option mustGenerateConditionName="true" conditionEntityDefaultName="_measure" mustGenerateConditionEntityIndex="true" /> <!-- NB does not support the full array of Relex measure/dependency types -->
				</paramDepRel>
			</function>


			<function name="defineToBeAndToDoConditions">
				<example><!--
				eg The pastry tasted awesome. _to-be(taste[3], awesome[4]) + _subj(taste[3], pastry[2])
				_to-be(taste[3], awesome[4])
				_subj(taste[3], pastry[2]) //will have been already interpreted as an action by linkSubjectOrObjectRelationships()
				--></example>
				<!-- GIA_DO_NOT_SUPPORT_SPECIAL_CASE_1C_RELATIONS_TREAT_TODO_OR_TOBE_AND_SUBJECT_RELATION_AS_SUBSTANCE_LINK -->
				<!--
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_to-be|_to-do" relationArrayTestSize="2" /> //redundant test
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-be" />
				<option functionToExecuteUponFind="4" />
				//#ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetReferenceValue="true" /> //eg The chicken ate the pie that likes to draw.
				/#endif
				</paramDepRel>
				-->
				<!-- #else -->
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_to-be|_to-do" relationArrayTestSize="2" /> <!-- redundant test -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-be" />
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<option mustGenerateConditionEntityIndex="true" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" /> <!-- eg The chicken ate the pie that likes to draw. -->
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->

				<example><!--
				eg Jezel likes to draw. _to-do(like[2], draw[4]) + _subj(like[2], Jezel[1])
				_to-do(like[2], draw[4])
				_subj(like[2], Jezel[1]) //will have been already interpreted as an action by linkSubjectOrObjectRelationships()
				--></example>
				<!-- GIA_DO_NOT_SUPPORT_SPECIAL_CASE_1C_RELATIONS_TREAT_TODO_OR_TOBE_AND_SUBJECT_RELATION_AS_SUBSTANCE_LINK -->
				<!--
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_to-be|_to-do" relationArrayTestSize="2" /> //redundant test
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option functionToExecuteUponFind="4" />
				//#ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION
				<option defaultSameSetReferenceValue="true" /> //eg The chicken ate the pie that likes to draw.
				//#endif
				</paramDepRel>
				-->
				<!-- #else -->
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_to-be|_to-do" relationArrayTestSize="2" /> <!-- redundant test -->
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_to-do" />
				<option functionToExecuteUponFind="8" />
				<option functionEntityRelationID="1" FUNC_ENT="3" functionEntityRelationEntityID="3" />
				<option mustGenerateConditionEntityIndex="true" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="true" /> <!-- eg The chicken ate the pie that likes to draw. -->
				<!-- #endif -->
				</paramDepRel>
				<!-- #endif -->
			</function>

			<function name="extractQualities">
				<example><!--
				eg The broken pencil fell apart. / Giants are red. [Joe is happy.] / Tom runs quickly. _amod(pencil, broken) / _predadj(giants, red) / _advmod(run, quick)
				--></example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_amod|_predadj|_advmod" relationArrayTestSize="3" />
				<!-- <option useRedistributeSpecialCaseQualityAssignment="true" REL="1" REL_ENT="2" /> -->
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isSubstanceQuality" value="true" REL="1" REL_ENT="2" />
				</paramDepRel>
			</function>

			<function name="linkPropertiesParataxis">
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_parataxis" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="2" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="1" />
				<!-- #ifdefGIA_RECORD_SAME_REFERENCE_SET_INFORMATION -->
				<option defaultSameSetReferenceValue="false" />
				<!-- #endif -->
				</paramDepRel>
			</function>

			<!-- currently disabled; -->
			<!-- #ifndefGIA_TRANSLATOR_INTERPRET_CLAUSAL_COMPLEMENT_AS_ACTION_OBJECT_INSTEAD_OF_ACTION_PROPERTY -->
			<!--
			<function name="defineClausalComplementProperties">
				<example>
				eg He says that you like to swim. ccomp(say, like)
				</example>
				<paramDepRel mode="execute">
				<option numberOfRelations="1" />
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_ccomp" />
				<option functionToExecuteUponFind="4" />
				<option functionEntityRelationID="1" FUNC_ENT="1" functionEntityRelationEntityID="1" />
				<option functionEntityRelationID="1" FUNC_ENT="2" functionEntityRelationEntityID="2" />
				<option defaultSameSetReferenceValue="true" />
				</paramDepRel>
			</function>
			-->
			<!-- #endif -->

			<function name="defineTenseOnlyTimeConditions">
				<paramEntity mode="execute">
				<specialCase type="specialCaseCharacteristicsTestAndVector" variable="conditionType" value="1" negative="true" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="grammaticalTenseTemp" value="2" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="grammaticalTenseTemp" value="3" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="grammaticalTenseModifierArrayTemp" value="true" arrayIndex="0" />
				<option functionToExecuteUponFind="2" />
				</paramEntity>
			</function>
			
			<function name="defineActionConcepts1">
				<example>
				eg She can run to the park. aux(run-3, can-2))
				</example>
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option parseDisabledRelation="true" REL="1" /> <!-- aux will have been disabled, so must explicitly allow it to be parsed -->
				<option useRelationTest="true" REL="1" REL_ENT="3" relationTest="_aux" />
				<option useRelationTest="true" REL="1" REL_ENT="2" relationTest="can" />
				<specialCase type="specialCaseCharacteristicsTestOrVector" variable="isAction" value="true" REL="1" REL_ENT="1" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="isActionConcept" value="true" REL="1" REL_ENT="1" />
				</paramDepRel>
			</function>	
			
			<!-- NLC Only -->
			<function name="redistributeStanfordRelationsSetPluralBasedOnPredeterminers">
				<paramDepRel mode="redistribute">
				<option numberOfRelations="1" />
				<option parseDisabledRelation="true" REL="1" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="3" relationArrayTest="_det|_predet" relationArrayTestSize="2" />
				<option useRelationArrayTest="true" REL="1" REL_ENT="2" relationArrayTest="each|every|all" relationArrayTestSize="3" />
				<specialCase type="specialCaseCharacteristicsAssignmentVector" variable="grammaticalNumber" value="3" REL="1" REL_ENT="1" />	<!-- required for NLC_USE_PREPROCESSOR+NLC_CATEGORIES_TEST_PLURALITY_ENFORCE -->
				</paramDepRel>
			</function>									
		</file>								
	</translator>
</rules>
