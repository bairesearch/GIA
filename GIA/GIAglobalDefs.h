/*******************************************************************************
 *
 * This file is part of BAIPROJECT.
 *
 * BAIPROJECT is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * only, as published by the Free Software Foundation. The use of
 * intermediary programs or interfaces including file i/o is considered
 * remote network interaction. This does not imply such arrangements
 * do not constitute derivative works.
 *
 * BAIPROJECT is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Affero General Public License
 * version 3 along with BAIPROJECT.  If not, see <http://www.gnu.org/licenses/>
 * for a copy of the AGPLv3 License.
 *
 *******************************************************************************/

/*******************************************************************************
 *
 * File Name: GIAglobalsDefs.h
 * Author: Richard Bruce Baxter - Copyright (c) 2005-2015 Baxter AI (baxterai.com)
 * Project: General Intelligence Algorithm
 * Project Version: 2j5c 08-June-2015
 * Requirements: requires text parsed by NLP Parser (eg Relex; available in .CFF format <relations>)
 * Description: GIA specific global definitions
 *
 *
 * 		Dependencies Introduction
 *		=================================
 *
 *		The source for OpenGIA is written in ISO C++, some of which may require ISO/IEC 14882:2011 (C++11).
 *
 *		OpenGIA requires the following software to be pre-installed;
 *
 *		OpenGIA Execution Dependencies Installation
 *		=================================
 *
 *		Install External Package 1 - Freeglut
 *		--------------------------------------
 *
 *			(Linux Ubuntu 14.04 Only)
 *			sudo apt-get install freeglut3 OR;
 *			sudo dpkg -i freeglut3_2.8.1-1_amd64.deb
 *
 *			(Linux EL5 Only)
 *			yum install freeglut OR;
 *			rpm -i freeglut-2.4.0-7.1.el5.x86_64.rpm
 *
 *			(Linux EL6 Only)
 *			yum install freeglut OR;
 *			rpm -i freeglut-2.6.0-1.el6.x86_64.rpm
 *
 *			(Windows XP Only)
 *			unzip freeglut 2.4.0 (compiled).zip
 *			copy freeglut.dll from freeglut 2.4.0 (compiled).zip to c:\Windows\System32
 *
 *			(Windows 7/8 x86_64 Only)
 *			unzip freeglut 2.6.0 (compiled).zip
 *			copy freeglut.dll from freeglut 2.6.0 (compiled) - 32bit.zip to: C:\WINDOWS\SysWOW64
 *			[or System32]
 *
 *
 *		Freeglut may be downloaded via;
 *
 *		* (Linux) distribution repository
 *		* (Windows) see http://tempvariable.blogspot.com.au/2008/02/installing-freeglut-on-visual-studio.html / http://www.transmissionzero.co.uk/software/freeglut-devel/
 *
 *
 *		Install External Package 2 - Wordnet libraries
 *		--------------------------------------
 *
 *			(Linux Ubuntu 14.04 Only)
 *			sudo apt-get install wordnet wordnet-dev[?] wordnet-sense-index OR;
 *			sudo dpkg -i wordnet_1%3a3.0-32_amd64.deb wordnet-base_1%3a3.0-32_all.deb wordnet-dev_1%3a3.0-32_amd64.deb wordnet-gui_1%3a3.0-32_amd64.deb wordnet-sense-index_1%3a3.0-32_all.deb
 *
 *			(Linux EL5 Only)
 *			yum install wordnet OR;
 *			rpm -i wordnet-3.0-13.el6.x86_64.rpm
 *
 *			(Linux EL6 Only)
 *			yum install wordnet OR;
 *			rpm -i wordnet-3.0-13.el5.x86_64.rpm
 *
 *			(Windows XP Only {UNTESTED})
 *			Install WordNet_3.0_win32-setup.exe (from Google Code)
 *
 *			(Windows 7/8 x86_64 Only)
 *			Install WordNet_3.0_win32-setup.exe (from Google Code)
 *
 *		WordNet may be downloaded via;
 *
 *		* (Linux) distribution repository
 *		* (Windows) Download WordNet 3.0 for Windows from http://code.google.com/p/wordnet3p0forwindows
 *
 *
 *		Install External Package 3a - Relex [OPTIONAL] {Linux Only}
 *		--------------------------------------
 *
 *		Create/Copy execute-relex.sh and place it in the Relex binary folder.
 *
 *		NB execute-relex.sh contains the following text;
 *
 *			export LANG=en_US.UTF-8
 *
 *			VM_OPTS="-Xmx1024m"
 *
 *			RELEX_OPTS="\
 *				-Djava.library.path=/usr/lib:/usr/local/lib \		[Ubuntu: -Djava.library.path=/usr/lib:/usr/lib/jni:/usr/local/lib:/usr/local/lib/jni \ ] {extract from autogenerated batch-process.sh}
 *				-Drelex.algpath=data/relex-semantic-algs.txt \
 *				-Dwordnet.configfile=data/wordnet/file_properties.xml \
 *				"
 *
 *			CLASSPATH="-classpath \
 *			bin:\
 *			/usr/local/share/java/opennlp-tools-1.4.3.jar:\
 *			/usr/local/share/java/opennlp-tools-1.3.0.jar:\
 *			/usr/local/share/java/maxent-2.5.2.jar:\
 *			/usr/local/share/java/maxent-2.4.0.jar:\
 *			/usr/local/share/java/trove.jar:\
 *			/usr/local/share/java/jwnl.jar:\
 *			/usr/local/share/java/jwnl-1.3.3.jar:\
 *			/usr/share/java/commons-logging.jar:\
 *			/usr/share/java/gnu-getopt.jar:\
 *			/usr/local/share/java/linkgrammar.jar:\
 *			/usr/share/java/linkgrammar.jar:\
 *			/usr/share/java/xercesImpl.jar:\
 *			/usr/share/java/xml-apis.jar:\
 *			/opt/GATE-4.0/lib/PDFBox-0.7.2.jar:\
 *			#/opt/GATE-4.0/bin/gate.jar:\
 *			/opt/GATE-4.0/lib/jdom.jar:\
 *			/opt/GATE-4.0/lib/jasper-compiler-jdt.jar:\
 *			/opt/GATE-4.0/lib/nekohtml-0.9.5.jar:\
 *			/opt/GATE-4.0/lib/ontotext.jar:\
 *			"
 *
 *		1. 	Install Java Development Tools (eg openjdk and openjdk-devel)
 *
 *				Ubuntu 14.04 example;
 *
 *				sudo apt-get install openjdk-7-jdk OR;
 *				sudo dpkg -i openjdk-7-jdk_7u51-2.4.4-0ubuntu0.13.10.1_amd64.deb (and dependencies)
 *
 *				Redhat EL5/EL6 example;
 *
 *				yum install java-1.6.0-openjdk-devel
 *				yum install java-1.6.0-openjdk
 *					OR (EL5);
 *				rpm -i java-1.6.0-openjdk-devel.el5.x86_64.rpm
 *				rpm -i java-1.6.0-openjdk.el5.x86_64.rpm
 *					OR (EL6);
 *				rpm -i java-1.6.0-openjdk-devel-1.6.0.0-1.36.b17.el6_0.x86_64.rpm / java-1.6.0-openjdk-devel-1.6.0.0-1.39.b17.el6_0.x86_64.rpm
 *				rpm -i java-1.6.0-openjdk-1.6.0.0-1.36.b17.el6_0.x86_64.rpm / java-1.6.0-openjdk-1.6.0.0-1.39.b17.el6_0.x86_64.rpm
 *
 *		2. 	Install Link Parser
 *
 *				Ubuntu 14.04 example;
 *
 *				sudo apt-get install link-grammar liblink-grammar4-dev liblink-grammar4-java OR;
 *				sudo dpkg -i liblink-grammar4_4.7.4-2_amd64.deb liblink-grammar4-dev_4.7.4-2_amd64.deb liblink-grammar4-java_4.7.4-2_amd64.deb (and dependencies)
 *
 *				Redhat EL5/EL6 example;
 *				(download: http://www.link.cs.cmu.edu/link/
 *				alternate: http://www.abisource.com/projects/link-grammar/#download)
 *
 *				tar -xvf link-grammar-4.7.2.tar.gz
 *				cd link-grammar-4.7.2
 *				export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64
 *				./configure
 *				make
 *				su root
 *				make install
 *
 *		3. 	Install WordNet dependencies (eg tcl and tk)
 *
 *				Ubuntu 14.04 example;
 *
 *				sudo apt-get install tcl8.5 tcl8.5-lib tk8.5 tk8.5-lib OR;
 *				sudo dpkg -i tcl8.5_8.5.13-1ubuntu4_amd64.deb tcl8.5-lib_8.5.13-1ubuntu4_amd64.deb tk8.5_8.5.11-2ubuntu4_amd64.deb tk8.5-lib_8.5.11-2ubuntu4_amd64.deb (and dependencies)
 *
 *				Redhat EL5/EL6 example;
 *
 *				yum install tcl
 *				yum install tcl-devel
 *				yum install tk
 *				yum install tk-devel
 *					OR (EL5);
 *				rpm -i tcl-8.4.13-4.el5.x86_64.rpm
 *				rpm -i tcl-devel-8.4.13-4.el5.x86_64.rpm
 *				rpm -i tk-8.4.13-5.el5_1.1.x86_64.rpm
 *				rpm -i tk-devel-8.4.13-5.el5_1.1.x86_64.rpm
 *					OR (EL6);
 *				rpm -i tcl-8.5.7-6.el6.x86_64.rpm
 *				rpm -i tcl-devel-8.5.7-6.el6.x86_64.rpm
 *				rpm -i tk-8.5.7-5.el6.x86_64.rpm
 *				rpm -i tk-devel-8.5.7-5.el6.x86_64.rpm
 *
 *		4.	Install WordNet
 *
 *				Ubuntu 14.04 example;
 *
 *				sudo apt-get install wordnet wordnet-dev wordnet-sense-index OR;
 *				sudo dpkg -i wordnet_1%3a3.0-31_amd64.deb wordnet-base_1%3a3.0-31_all.deb wordnet-dev_1%3a3.0-31_amd64.deb wordnet-gui_1%3a3.0-31_amd64.deb wordnet-sense-index_1%3a3.0-31_all.deb
 *
 *				Redhat EL5/EL6 example;
 *
 *				rpm -i epel-release...
 *				yum install wordnet wordnet-devel
 *					OR (EL5);
 *				rpm -i wordnet-3.0-13.el5.x86_64.rpm wordnet-devel-3.0-13.el5.x86_64.rpm
 *					OR (EL6);
 *				rpm -i wordnet-3.0-13.el6.x86_64.rpm wordnet-devel-3.0-13.el6.x86_64.rpm
 *
 *		5.	Install JWNL Java wordnet library
 *			(download: http://sourceforge.net/projects/jwordnet/)
 *
 *				Ubuntu 14.04 example;
 *
 *				unzip jwnl14-rc2.zip
 *				cd jwnl14-rc2
 *				sudo cp jwnl.jar /usr/share/java/		[see relex-1.4.0/build.xml for location]
 *				sudo mkdir /usr/local/share/java/
 *				sudo cp jwnl.jar /usr/local/share/java/		[see relex-1.4.0/batch-process.sh for location]
 *				sudo chmod 777 /usr/share/java/jwnl.jar
 *				sudo chmod 777 /usr/local/share/java/jwnl.jar
 *
 *				Redhat/EL5 example;
 *
 *				unzip jwnl14-rc2.zip
 *				cd jwnl14-rc2
 *				su root
 *				cp jwnl.jar /usr/share/java/		[see relex-1.4.0/build.xml for location]
 *				mkdir /usr/local/share/java/
 *				cp jwnl.jar /usr/local/share/java/	[see relex-1.4.0/batch-process.sh for location]
 *				chmod 777 /usr/share/java/jwnl.jar
 *				chmod 777 /usr/local/share/java/jwnl.jar
 *
 *		6. 	Install Relex Dependencies (ant)
 *
 *				Ubuntu 14.04 example;
 *
 *				sudo apt-get install ant
 *				sudo apt-get install libcommons-logging-java
 *					OR;
 *				sudo dpkg -i ant_1.9.2-1_all.deb ant-optional_1.9.2-1_all.deb libxerces2-java_2.11.0-7_all.deb libxml-commons-external-java_1.4.01-2build1_all.deb libxml-commons-resolver1.1-java_1.2-7build1_all.deb
 *				sudo dpkg -i libapache-pom-java_10-2build1_all.deb libcommons-logging-java_1.1.3-1_all.deb libcommons-parent-java_22-2build1_all.deb liblink-grammar4-dev_4.7.4-2_amd64.deb liblink-grammar4-java_4.7.4-2_amd64.deb
 *
 *				Redhat/EL5 example;
 *
 *				yum install ant
 *					OR [EL5]
 *				rpm -i ant-1.6.5-2jpp.2.x86_64.rpm
 *					OR [EL6]
 *				rpm -i ant-1.7.1-13.el6.x86_64.rpm
 *				rpm -i xml-commons-apis-1.3.04-3.6.el6.x86_64.rpm
 *		  		rpm -i xml-commons-resolver-1.1-4.18.el6.x86_64.rpm
 *		  		rpm -i xerces-j2-2.7.1-12.5.el6.x86_64.rpm
 *				rpm -i ant-nodeps-1.7.1-13.el6.x86_64.rpm
 *				rpm -i jakarta-commons-logging-1.0.4-10.el6.noarch.rpm?
 *				rpm -i ant-commons-logging-1.7.1-13.el6.x86_64.rpm
 *
 *		7. 	Install Gate 4.0 (optional)
 *			(download: http://gate.ac.uk/download/)
 *
 *				Redhat EL5/EL6 example;
 *				[user needs to have logged in as root at least one time in the past before able to run this from root]
 *
 *				su root
 *				java -jar gate-4.0-build2752-installer-other.jar
 *					run through GUI;
 *					set installation path to /opt/GATE-4.0
 *					tick sources and development documentation
 *					install
 *
 *		8. 	Install GNU getopt (optional) (not required for Ubuntu)
 *			(download: http://www.java2s.com/Code/Jar/GHI/Downloadgetoptjar.htm)
 *
 *				Redhat EL5/EL6 example;
 *
 *				unzip getopt.jar.zip
 *				cd getopt.jar.zip_FILES
 *				su root
 *				cp getopt.jar /usr/share/java/gnu-getopt.jar
 *
 *			[not required for Ubuntu: install the "libgetopt-java" package].
 *
 *		9.	Install opennlp (optional)
 *			(download: http://sourceforge.net/projects/opennlp/)
 *
 *				Redhat EL5/EL6 example;
 *
 *				tar -xvf opennlp-tools-1.4.3.tgz
 *				cd opennlp-tools-1.4.3
 *				su root
 *				export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64
 *				./build.sh
 *				cp output/opennlp-tools-1.4.3.jar /usr/local/share/java/
 *				cp lib/maxent-2.5.2.jar /usr/local/share/java/
 *				cp lib/jwnl-1.3.3.jar /usr/local/share/java/
 *				cp lib/jwnl-1.3.3.jar /usr/local/share/java/jwnl.jar
 *				cp lib/trove.jar /usr/local/share/java/
 *
 *		10. 	Install Relex
 *			(download: http://sourceforge.net/projects/relex/
 *			alternate: https://launchpad.net/relex/+download)
 *
 *				Ubuntu 14.04 example;
 *
 *				tar -xvf relex-1.4.0.tar.gz
 *				cd relex-1.4.0
 *				ant
 *				./batch-process.sh
 *
 *				Redhat/EL5 example;
 *
 *				tar -xvf relex-1.4.0.tar.gz
 *				cd relex-1.4.0
 *				export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64
 *				ant
 *				./batch-process.sh
 *
 *
 *		11.	Configure relex xml files for wordnet
 *
 *				Ubuntu 14.04 example;
 *
 *				cd relex-1.4.0/data/wordnet
 *				gedit file_properties.xml
 *				change dictionary_path to <param name="dictionary_path" value="/usr/share/wordnet"/>
 *
 *				Redhat EL5/EL6 example;
 *
 *				cd relex-1.4.0/data/wordnet
 *				gedit file_properties.xml
 *				change dictionary_path to <param name="dictionary_path" value="/usr/share/wordnet-3.0/dict"/>
 *
 *
 *		12.	Configure relex batch-process.sh/***.sh class paths;
 *
 *				Redhat EL5/EL6 and Ubuntu example;
 *
 *				cd relex-1.4.0
 *				gedit batch-process.sh [append/modify the following]
 *					/usr/local/share/java/jwnl-1.3.3.jar:\
 *					/usr/share/java/xml-apis.jar:\
 *					/opt/GATE-4.0/lib/PDFBox-0.7.2.jar:\
 *
 *
 *
 *
 *		Install External Package 3b - Stanford Parser [OPTIONAL] {Linux/Windows}
 *		--------------------------------------
 *
 *		Create/Copy execute-stanfordParser.sh (Linux) / execute-stanfordParser.bat (Windows) and place it in the Stanford Parser binary folder.
 *
 *
 *		NB execute-stanfordParser.sh (#!/usr/bin/env bash) contains the following text;
 *
 *			#!/usr/bin/env bash
 *			scriptdir=`dirname $0`
 *			java -mx3g -cp "$scriptdir/*:" edu.stanford.nlp.parser.lexparser.LexicalizedParser -outputFormat "wordsAndTags,penn,typedDependencies" edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz $3/$1 > $4/$2
 *
 *		NB execute-stanfordParser.bat contains the following text;
 *
 *			@echo off
 *			:: Runs the English PCFG parser on one or more files, printing trees only
 *			:: usage: lexparser fileToparse
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -mx3g -cp "*;" edu.stanford.nlp.parser.lexparser.LexicalizedParser -outputFormat "wordsAndTags,penn,typedDependencies" edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz %3/%1 > %4/%2
 *
 *		Stanford Parser may be downloaded via;
 *
 *		(Linux and Windows) eg http://nlp.stanford.edu/software/stanford-parser-2012-03-09.tgz / http://nlp.stanford.edu/software/stanford-parser-2013-04-05.zip / http://nlp.stanford.edu/software/stanford-parser-full-2014-01-04.zip
 *
 *
 *		Install External Package 3c - Stanford CoreNLP [OPTIONAL] {Linux/Windows}
 *		--------------------------------------
 *
 *		Create/Copy execute-stanfordCoreNLP.sh (Linux) / execute-stanfordCoreNLP.bat (Windows) and place it in the Stanford CoreNLP binary folder.
 *
 *		NB execute-stanfordCoreNLP.sh contains the following text (depending on the version of Stanford CoreNLP);
 *
 *			eg;
 *			scriptdir=`dirname $0`
 *			java -cp $scriptdir/stanford-corenlp-2012-04-03.jar:$scriptdir/stanford-corenlp-2012-03-09-models.jar:$scriptdir/xom.jar:$scriptdir/joda-time.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file $3/$1 -outputDirectory $4 -outputExtension $5
 *				/
 *			scriptdir=`dirname $0`
 *			java -cp $scriptdir/stanford-corenlp-1.3.5.jar:$scriptdir/stanford-corenlp-1.3.5-models.jar:$scriptdir/xom.jar:$scriptdir/joda-time.jar:$scriptdir/jollyday.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file $3/$1 -outputDirectory $4 -outputExtension $5
 *				/
 *			scriptdir=`dirname $0`
 *			java -cp $scriptdir/stanford-corenlp-3.3.1.jar:$scriptdir/stanford-corenlp-3.3.1-models.jar:$scriptdir/xom.jar:$scriptdir/joda-time.jar:$scriptdir/jollyday.jar:$scriptdir/ejml-0.23.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file $3/$1 -outputDirectory $4 -outputExtension $5
 *
 *		NB execute-stanfordCoreNLP.bat contains the following text (depending on the version of Stanford CoreNLP);
 *
 *			eg;
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -cp stanford-corenlp-2012-04-03.jar;stanford-corenlp-2012-03-09-models.jar;xom.jar;joda-time.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file %3/%1 -outputDirectory %4 -outputExtension %5
 *				/
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -cp stanford-corenlp-1.3.5.jar;stanford-corenlp-1.3.5-models.jar;xom.jar;joda-time.jar;jollyday.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file %3/%1 -outputDirectory %4 -outputExtension %5
 *				/
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -cp stanford-corenlp-3.3.1.jar;stanford-corenlp-3.3.1-models.jar;xom.jar;joda-time.jar;jollyday.jar;ejml-0.23.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file %3/%1 -outputDirectory %4 -outputExtension %5
 *
 *		NB execute-stanfordCoreNLPwithoutPT.sh contains the following text (depending on the version of Stanford CoreNLP);
 *
 *			eg;
 *			scriptdir=`dirname $0`
 *			java -cp $scriptdir/stanford-corenlp-2012-04-03.jar:$scriptdir/stanford-corenlp-2012-03-09-models.jar:$scriptdir/xom.jar:$scriptdir/joda-time.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,parse -file $3/$1 -outputDirectory $4 -outputExtension $5
 *				/
 *			scriptdir=`dirname $0`
 *			java -cp $scriptdir/stanford-corenlp-1.3.5.jar:$scriptdir/stanford-corenlp-1.3.5-models.jar:$scriptdir/xom.jar:$scriptdir/joda-time.jar:$scriptdir/jollyday.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,parse -file $3/$1 -outputDirectory $4 -outputExtension $5
 *				/
 *			scriptdir=`dirname $0`
 *			java -cp $scriptdir/stanford-corenlp-3.3.1.jar:$scriptdir/stanford-corenlp-3.3.1-models.jar:$scriptdir/xom.jar:$scriptdir/joda-time.jar:$scriptdir/jollyday.jar:$scriptdir/ejml-0.23.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,parse -file $3/$1 -outputDirectory $4 -outputExtension $5
 *
 *		NB execute-stanfordCoreNLPwithoutPT.bat contains the following text (depending on the version of Stanford CoreNLP);
 *
 *			eg;
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -cp stanford-corenlp-2012-04-03.jar;stanford-corenlp-2012-03-09-models.jar;xom.jar;joda-time.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,parse -file %3/%1 -outputDirectory %4 -outputExtension %5
 *				/
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -cp stanford-corenlp-1.3.5.jar;stanford-corenlp-1.3.5-models.jar;xom.jar;joda-time.jar;jollyday.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,parse -file %3/%1 -outputDirectory %4 -outputExtension %5
 *				/
 *			"C:\Program Files\Java\jre7\bin\java.exe" -d64 -cp stanford-corenlp-3.3.1.jar;stanford-corenlp-3.3.1-models.jar;xom.jar;joda-time.jar;jollyday.jar;ejml-0.23.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,parse -file %3/%1 -outputDirectory %4 -outputExtension %5
 *
 *		Stanford CoreNLP may be downloaded via;
 *
 *		(Linux and Windows) eg http://nlp.stanford.edu/software/stanford-corenlp-2012-04-03.tgz / http://nlp.stanford.edu/software/stanford-corenlp-full-2013-04-04.zip / http://nlp.stanford.edu/software/stanford-corenlp-full-2014-01-04.zip
 *
 *			Install dos2unix (required for Stanford CoreNLP compatibility):
 *
 *			(Linux Ubuntu Only)
 *			sudo apt-get install dos2unix
 *			sudo dpkg -i dos2unix_6.0.3-1_amd64.deb
 *
 *			(Linux EL5 Only)
 *			yum install dos2unix
 *			rpm -i dos2unixXXX.rpm
 *
 *			(Linux EL6 Only)
 *			yum install dos2unix
 *			rpm -i dos2unixXXX.rpm
 *
 *
 *		OpenGIA Development Dependencies Installation
 *		=================================
 *
 *		Compile/Link External Package 1 - Freeglut development libraries
 *		--------------------------------------
 *
 *			(Linux Ubuntu 14.04 Only)
 *			sudo apt-get install freeglut3-dev OR;
 *			sudo dpkg -i freeglut3-dev_2.8.1-1_amd64.deb
 *
 *			(Linux EL5 Only)
 *			yum install freeglut-devel OR;
 *			rpm - i freeglut-devel-2.4.0-7.1.el5.x86_64.rpm
 *
 *			(Linux EL6 Only)
 *			yum install freeglut-devel OR;
 *			rpm -i freeglut-devel-2.6.0-1.el6.x86_64.rpm
 *
 *			(Windows XP Only);
 *			unpack source code freeglut 2.4.0 (compiled).zip
 *			copy freeglut.h to: C:\Program Files\Microsoft Visual Studio 9.0\VC\include\GL\
 *			(note: you'll have to create the GL folder)
 *			copy freeglut_ext.h to: C:\Program Files\Microsoft Visual Studio 9.0\VC\include\GL\
 *			copy freeglut_std.h to: C:\Program Files\Microsoft Visual Studio 9.0\VC\include\GL\
 *			copy freeglut.lib to: C:\Program Files\Microsoft Visual Studio 9.0\VC\lib\
 *			copy freeglut.dll to: C:\WINDOWS\system32\
 *
 *			(Windows 7 x86_64 Only);
 *			unpack source code freeglut 2.6.0 (compiled) - 32bit.zip
 *			copy freeglut.h to: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\GL\
 *			(note: you'll have to create the GL folder)
 *			copy freeglut_ext.h to: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\GL\
 *			copy freeglut_std.h to: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\GL\
 *			copy freeglut.lib to: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib\
 *			copy freeglut.dll to: C:\WINDOWS\SysWOW64 [or System32]
 *
 *			(Windows 8 x86_64 Only);
 *			unpack source code freeglut 2.6.0 (compiled) - 32bit.zip
 *			copy freeglut.h to: C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\GL\
 *			(note: you'll have to create the GL folder)
 *			copy freeglut_ext.h to: C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\GL\
 *			copy freeglut_std.h to: C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\GL\
 *			copy freeglut.lib to: C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\lib\
 *			copy freeglut.dll to: C:\WINDOWS\SysWOW64 [or System32]
 *
 *		Freeglut may be downloaded via;
 *
 *		* (Linux) distribution repository
 *		* (Windows) see http://tempvariable.blogspot.com.au/2008/02/installing-freeglut-on-visual-studio.html / http://www.transmissionzero.co.uk/software/freeglut-devel/
 *
 *		Compile/Link External Package 2 - Wordnet development libraries
 *		--------------------------------------
 *
 *			(Linux Ubuntu 14.04 Only)
 *			sudo apt-get install wordnet wordnet-dev wordnet-sense-index OR;
 *			sudo dpkg -i wordnet_1%3a3.0-31_amd64.deb wordnet-base_1%3a3.0-31_all.deb wordnet-dev_1%3a3.0-31_amd64.deb wordnet-gui_1%3a3.0-31_amd64.deb wordnet-sense-index_1%3a3.0-31_all.deb
 *
 *			(Linux EL5 Only)
 *			yum install wordnet-devel OR;
 *			rpm -i wordnet-devel-3.0-13.el6.x86_64.rpm
 *
 *			(Linux EL6 Only)
 *			yum install wordnet-devel OR;
 *			rpm -i wordnet-devel-3.0-13.el5.x86_64.rpm
 *
 *			(Windows XP Only {UNTESTED})
 *			Install WordNet_3.0_win32-setup.exe (from Google Code)
 *			copy wn.lib to C:\Program Files\Microsoft Visual Studio 9.0\VC\lib\
 *			copy wn.h to C:\Program Files\Microsoft Visual Studio 9.0\VC\Include\
 *			ensure wn.lib is added to MS Visual Studio OR project - Linker - additional dependencies
 *
 *			(Windows 7/8 x86_64 Only)
 *			Install WordNet_3.0_win32-setup.exe (from Google Code)
 *			copy wn.lib to C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib
 *			copy wn.h to C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\Include\
 *			ensure wn.lib is added to MS Visual Studio OR project - Linker - additional dependencies
 *
 *			To Compile Wordnet 3.0 in Visual Studio 2010 (to create wn.lib);
 *			Install WordNet_3.0_win32-setup.exe (from Google Code])
 *			extract C:\Program Files (x86)\WordNet\3.0\src\wn source project.zip
 *			wn project - properties - General - Common Language Runtime Support - No Common Language Runtime Support
 *			wn project - properties - General - Static Library (.lib)
 *			Build All
 *
 *		WordNet may be downloaded via;
 *
 *		* (Linux) yum install wordnet-devel
 *		* (Windows) Download WordNet 3.0 for Windows from http://code.google.com/p/wordnet3p0forwindows
 *
 *
 *
 *		OpenGIA Compilation
 *		=================================
 *
 *		Compile OpenGIA.exe
 *
 *			(Linux Only)
 *			open SHAREDglobalDefs.h,
 *				ensure #define LINUX is added
 *				ensure only #define COMPILE_GIA is uncommented
 *			copy makefile.GIA makefile
 *			./clear.bat (rm* .o)
 *			make
 *
 *			(Windows Only)
 *			open SHAREDglobalDefs.h
 *				ensure #define LINUX is commented out
 *				ensure only #define COMPILE_GIA is uncommented
 *			Open GIA.sln
 *			Build All
 *
 *		*Important preprocessor definitions to consider before compilation;*
 *
 *			#define LINUX
 *
 *
 *		Usage Examples;
 *		---------------------------------
 *
 *		Linux EL5/EL6/UB13:
 *
 *		Examples using NLP input from Relex;
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -itxt inputText.txt -oall semanticNet -nlprelation 0 -nlpfeature 0 -nlprelationq 0 -nlpfeatureq 0 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -itxt inputText.txt -itxtq inputTextQuery.txt -oall semanticNet -nlprelation 0 -nlpfeature 0 -nlprelationq 0 -nlpfeatureq 0 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		Example using NLP input from Stanford Core NLP;
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -itxt inputText.txt -oall semanticNet -nlprelation 1 -nlpfeature 1 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -itxt inputText.txt -itxtq inputTextQuery.txt -oall semanticNet -nlprelation 1 -nlpfeature 1 -nlprelationq 1 -nlpfeatureq 1 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		Example using NLP input from Stanford Parser + Stanford Core NLP;
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -itxt inputText.txt -oall semanticNet -nlprelation 2 -nlpfeature 1 -nlprelationq 2 -nlpfeatureq 1 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -itxt inputText.txt -itxtq inputTextQuery.txt -oall semanticNet -nlprelation 2 -nlpfeature 1 -nlprelationq 2 -nlpfeatureq 1 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		./OpenGIA.exe -lrpfolder "/home/systemusername/source/source/LRPdata" -syndet 1 -itxt inputText.txt -oall semanticNet -nlprelation 2 -nlpfeature 1 -nlprelationq 2 -nlpfeatureq 1 -nlprelexfolder "/home/systemusername/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "/home/systemusername/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "/home/systemusername/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *
 *		Windows XP/7/8:
 *
 *		Example using NLP input from Stanford Core NLP;
 *		OpenGIA.exe -lrpfolder "C:/Files/source/sourcevs/source/working/LRPdata" -itxt inputText.txt -oall semanticNet -nlprelation 1 -nlpfeature 1 -nlprelationq 1 -nlpfeatureq 1 -nlprelexfolder "C:/Files/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "C:/Files/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "C:/Files/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		OpenGIA.exe -lrpfolder "C:/Files/source/sourcevs/source/working/LRPdata" -itxt inputText.txt -itxtq inputTextQuery.txt -oall semanticNet -nlprelation 1 -nlpfeature 1 -nlprelationq 1 -nlpfeatureq 1 -nlprelexfolder "C:/Files/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "C:/Files/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "C:/Files/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		Example using NLP input from Stanford Parser + Stanford Core NLP;
 *		OpenGIA.exe -lrpfolder "C:/Files/source/sourcevs/source/working/LRPdata" -itxt inputText.txt -oall semanticNet -nlprelation 2 -nlpfeature 1 -nlprelationq 2 -nlpfeatureq 1 -nlprelexfolder "C:/Files/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "C:/Files/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "C:/Files/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *		OpenGIA.exe -lrpfolder "C:/Files/source/sourcevs/source/working/LRPdata" -itxt inputText.txt -itxtq inputTextQuery.txt -oall semanticNet -nlprelation 2 -nlpfeature 1 -nlprelationq 2 -nlpfeatureq 1 -nlprelexfolder "C:/Files/soft/BAISource/relex/relex-1.4.0" -nlpstanfordcorenlpfolder "C:/Files/soft/BAISource/stanford/coreNLP/stanford-corenlp-full-2014-01-04" -nlpstanfordparserfolder "C:/Files/soft/BAISource/stanford/parser/stanford-parser-full-2014-01-04" -notshow
 *
 *		Filesystem Database Configuration;
 *		---------------------------------
 *
 *		The GIA Database (KB) is a (Linux) filesystem structure of the format:
 *			//server/database/conceptEntityNodesLoadedList.txt
 *			//server/database/w/o/r/word1/0/0/0/entity.ent [instance0 is the concept associated with word1]
 *			//server/database/w/o/r/word1/0/0/0/[referencesOfInstance0].ref [instance0 is the concept associated with word1]
 *			//server/database/w/o/r/word1/0/0/1/entity.ent
 *			//server/database/w/o/r/word1/0/0/1/[referencesOfInstance1].ref
 *			//server/database/w/o/r/word1/0/0/2/entity.ent
 *			//server/database/w/o/r/word1/0/0/2/[referencesOfInstance2].ref
 *			//server/database/w/o/r/word2/0/0/0/entity.ent [instance0 is the concept associated with word2]
 *			//server/database/w/o/r/word2/0/0/0/[referencesOfInstance0].ref [instance0 is the concept associated with word2]
 *			//server/database/w/o/r/word2/0/0/1/entity.ent
 *			//server/database/w/o/r/word2/0/0/1/[referencesOfInstance1].ref etc
 *
 *
 *******************************************************************************/

#ifndef HEADER_GIA_GLOBAL_DEFS
#define HEADER_GIA_GLOBAL_DEFS

#include "SHAREDglobalDefs.h"


#define GIA_CREATE_NON_SPECIFIC_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS		//GIA 2a7a		//this is recommended for NLC and required for USE_GIA2	//warning: GIA_CREATE_NON_SPECIFIC_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS needs to be tested independently without USE_GIA2

//#define GIA_DISABLE_2g_CODE_FOR_DEBUG
//#define GIA_DISABLE_2h_CODE_FOR_DEBUG
//#define GIA_DISABLE_2i_CODE_FOR_DEBUG
//#define GIA_DISABLE_2j_CODE_FOR_DEBUG
#ifndef GIA_DISABLE_2j_CODE_FOR_DEBUG
	#define GIA_STANFORD_PARSER_AND_CORENLP_VERSION_2015_04_20_OR_GREATER	//takes into account changes in dependency relations generated by Stanford
	#define GIA_STANFORD_PARSER_AND_CORENLP_VERSION_2014_04_04_OR_GREATER
	#define GIA_DYNAMICALLY_LINK_FROM_CONDITIONS	//added 2j4a
	#ifdef GIA_DYNAMICALLY_LINK_FROM_CONDITIONS
		#define STANFORD_CORENLP_CONNECT_TO_CONDITION_TO_FROM_CONDITION_BUG_GIA_WORKAROUND
		//#define GIA_DYNAMICALLY_LINK_FROM_CONDITIONS_CORRECT_SAME_REFERENCE_SET
	#endif
	#define GIA_DYNAMICALLY_LINK_ENTITIES_DISABLE_GIA2_SEMANTIC_RELATION_GENERATION	//2j5b
	//#define GIA2_CREATE_FEATURES_FOR_ARTIFICIAL_ENTITIES	//considered for 2j5a but rejected
#endif
#ifndef GIA_DISABLE_2g_CODE_FOR_DEBUG
	#define GIA_SUPPORT_NUMBER_OF	//added 2g9a/24-September-2014
	#ifdef USE_NLC
		#define GIA_DISABLE_CROSS_SENTENCE_REFERENCING	//added 2g5a/05-September-2014 - required for NLC 1j2b+, optional for NLC 1k11a+
		#define GIA_SUPPORT_NLC_INTEGRATION	//GIA uses NLCsentence code
		#ifdef GIA_SUPPORT_NLC_INTEGRATION
			#define GIA_SUPPORT_NLC_INTEGRATION_DISABLE_ADVANCED_REFERENCING_FOR_LOGICAL_CONDITIONS_SUBSTANCE_CONCEPTS 	//added 2i24a
		#endif
	#endif
	#ifdef GIA_DISABLE_CROSS_SENTENCE_REFERENCING
		#define GIA_DISABLE_ALIAS_ENTITY_MERGING	//added 2g11a/21-October-2014 - required for NLC 1k14a+	//IMPORTANT: when activating/deactivating from compilation, ensure GIArules.xml is updated accordingly (search for "GIA_DISABLE_ALIAS_ENTITY_MERGING") 
		//#define GIA_TRANSLATOR_DREAM_MODE_CREATE_AND_LINK_NON_SPECIFIC_CONCEPTS_FOR_ALL_ENTITIES	//untested and unused
		#define GIA_SUPPORT_NLC_INTEGRATION_DISABLE_ADVANCED_REFERENCING_FOR_LOGICAL_CONDITIONS	//added 2i31a
	#else
		#ifdef GIA_SUPPORT_NLC_INTEGRATION
			#define GIA_SUPPORT_NLC_INTEGRATION_DEFINE_REFERENCE_CONTEXT_BY_TEXT_INDENTATION	//added 2g10a/17-October-2014	//requires NLC preprocessor to be executed to extract text indentation, NLCpreprocessorSentenceClass.h, and setNLCsentence() to be called before executing GIA
		#endif
	#endif
	#define GIA_STORE_CONNECTION_SENTENCE_INDEX	//added 2f15d/16-July-2014 [required for NLC 1g15a+]
	#define GIA_REMOVE_REDUNDANT_LOGICAL_CONDITION_ENTITIES	//added 2f13a/14-July-2014
	#define GIA_XML_RECORD_ADDITIONAL_VARIABLES
#endif
#ifndef GIA_DISABLE_2i_CODE_FOR_DEBUG
	#define GIA_SUPPORT_PREDETERMINERS	//added 2i34a
	#define GIA_PREVENT_SUBSTANCE_CONCEPTS_FROM_BEEN_ADDED_AS_CHILDREN_OF_NON_SUBSTANCE_CONCEPTS	//2i20a
	#ifdef GIA_DISABLE_CROSS_SENTENCE_REFERENCING
		#ifdef USE_NLC
			#define GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING_ONLY	//2i19c	//NB this requires !GIA_QUERY_TRACE_CONCEPT_NODES_DEFINING_INSTANTIATIONS	//designed for GIA_CREATE_NON_SPECIFIC_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS
			#ifdef GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING_ONLY
				#define GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING	//2i19e
			#endif
		#endif
	#else
		#define GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING	//2i19e
	#endif
	#ifndef GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING
		#define GIA_TRANSLATOR_DREAM_MODE_LINK_SPECIFIC_CONCEPTS_AND_ACTIONS_ADVANCED //2i19a, disabled 2i27a
	#endif
	#define GIA_LRP_NLP_PARSABLE_PHRASE_SUPPORT_FILENAMES_WITH_FULLSTOPS	//2i18a
	#define GIA_TRANSLATOR_CONVERT_AMOD_WITH_NUMBERS_TO_QUANTITY_RELATION	//2i12a
	#define GIA_TRANSLATOR_DO_NOT_CREATE_SUBSTANCE_CONCEPT_PROPERTIES_FOR_NON_SUBSTANCE_CONCEPT_PARENTS	//2i10a
	#ifdef GIA_CREATE_NON_SPECIFIC_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS
		#define GIA_DYNAMICALLY_LINK_PRENOMINAL_MODIFIERS_OF_NOUNS	//2i9a	//requires GIA_CREATE_NON_SPECIFIC_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS (this is required such that only the instance list of a concept need be parsed when tracing both its definitions and properties/conditions)
		#ifdef GIA_DYNAMICALLY_LINK_PRENOMINAL_MODIFIERS_OF_NOUNS
			#define GIA_DYNAMICALLY_LINK_PRENOMINAL_MODIFIERS_OF_NOUNS_SWITCH_DEFINITION_LINKS_IF_NON_MATCHING_SUBSTANCE_CONCEPTS	//2i10b - designed to enable compatibility with NLC
			#define GIA_DYNAMICALLY_LINK_PRENOMINAL_MODIFIERS_OF_NOUNS_ENSURE_PROPERTY_PARENT_IS_DEFINITE	//2i28a
			#define GIA_DYNAMICALLY_LINK_PRENOMINAL_MODIFIERS_OF_NOUNS_ENSURE_PROPERTY_PARENT_IS_SUBSTANCECONCEPT_IF_NECESSARY	//2i30a
		#endif
	#endif
	#define GIA_TRANSLATOR_ADAPT_ENTITY_LINKING_FOR_SUBSTANCE_CONCEPTS	//2i7a
	#define GIA_REFERENCING_QUERY_SUPPORT_SAME_REFERENCE_SET_TESTS		//2i6a
	#define GIA_FEATURE_POS_TAG_NN_ONLY_MARK_AS_SINGULAR_WITH_DETERMINER	//2i5a
	#define GIA_SUPPORT_EXTRA_DETERMINERS	//added 2i2a
#endif
#ifndef GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING
	#define GIA_CREATE_NEW_SUBSTANCE_CONCEPT_FOR_EVERY_REFERENCE_TO_A_SUBSTANCE_CONCEPT	//GIA 2a10a	//disabled 2i19b
#endif
		
#ifndef GIA_DISABLE_2h_CODE_FOR_DEBUG
	#define GIA_SPATIOTEMPORAL_NETWORK		//yet to implement ~2h2a/17-November-2014+
	#ifdef GIA_SPATIOTEMPORAL_NETWORK
		#define GIA_LRP_NORMALISE_PREPOSITIONS	//added 2h1a/14-November-2014 - required for NLC 1m1a+
		#ifdef GIA_LRP_NORMALISE_PREPOSITIONS
			#define GIA_LRP_NORMALISE_INVERSE_PREPOSITIONS
			#define GIA_LRP_NORMALISE_TWOWAY_PREPOSITIONS
			#ifdef GIA_LRP_NORMALISE_TWOWAY_PREPOSITIONS
				#ifdef GIA_DISABLE_CROSS_SENTENCE_REFERENCING
					#define GIA_LRP_NORMALISE_TWOWAY_PREPOSITIONS_DUAL_CONDITION_LINKS_DISABLED	//only create twoway condition links in derivatives (eg NLC)
				#else
					#define GIA_LRP_NORMALISE_TWOWAY_PREPOSITIONS_DUAL_CONDITION_LINKS_ENABLED	//required for GIA advanced referencing
				#endif
			#endif
			#define GIA_LRP_DETECT_PREPOSITION_TYPE		//added 2h1a/14-November-2014 - required for NLC 1m1a+
			#define GIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR_NEW	//added 2h1c/14-November-2014 - required for NLC 1m1a+
		#endif
		#define GIA_SUPPORT_ACTIONS_OF_ACTIONS
		#ifdef GIA_SUPPORT_ACTIONS_OF_ACTIONS	
			#define GIA_SUPPORT_NONSTANDARD_INTERMEDIARY_VERB_TYPES
			#ifdef GIA_SUPPORT_NONSTANDARD_INTERMEDIARY_VERB_TYPES	
				#define GIA_FEATURE_POS_TAG_VERB_POTENTIAL	//added 2h2a/18-November-2014 - required for NLC 1m2a+	- adds new non-standard pos tag for "able" words
				#ifdef GIA_FEATURE_POS_TAG_VERB_POTENTIAL
					#define GIA_FEATURE_POS_TAG_VERB_POTENTIAL_INVERSE 	//added 2h2c/18-November-2014 - required for NLC 1m2a+	- adds new non-standard pos tag for "ive" words
				#endif
				#define GIA_FEATURE_POS_TAG_VERB_STATE	//added 2h2b/18-November-2014 - required for NLC 1m2a+	- adds new non-standard pos tag for states "eg open/opened" words
				#define GIA_FEATURE_POS_TAG_VERB_DESCRIPTION	//added 2h2d/18-November-2014 - required for NLC 1m2a+	- adds new non-standard pos tag for states "eg ion/ment" words
			#endif
		#endif
	#endif
#endif
#ifndef GIA_DISABLE_2g_CODE_FOR_DEBUG
	#ifdef USE_NLC
		#ifndef GIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR_NEW
			#define GIA_CREATE_INDEPENDENT_CONJUNCTION_ENTITIES	//added 2f8a/09-July-2014	//NB this is only required for NLC_SUPPORT_LOGICAL_CONDITION_OPERATIONS_ADVANCED	
		#endif
	#endif
#endif
	
//#define GIA_ENABLE_WARNINGS


//#define GIA_TRANSLATOR_ONLY_MERGE_ENTITY_NODES_WHEN_LINK_PREESTABLISHED_REFERENCES_GIA //disabled GIA 2c3c [disabling required for GIA2_NON_HEURISTIC_IMPLEMENTATION_GENERATE_EXPERIENCES_FOR_CONNECTIONIST_NETWORK_TRAIN] - CHECKTHIS does not cause problems with alternative test scenarios
	//issue detected (yet to be patched) with the disabling of GIA_TRANSLATOR_ONLY_MERGE_ENTITY_NODES_WHEN_LINK_PREESTABLISHED_REFERENCES_GIA: advanced referencing of aliases failure

#define GIA_USE_NON_STANDARD_CONDITION_CONDITION_CONNECTIONS_CONNECT_CONJUNCTIONS_TO_THEIR_RELEVANT_PREPOSITIONS	//required for USE_NLC

//#define GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC	//disabled GIA 2c1a
#ifndef GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_POSSESSION_EG_HAVING_INTO_A_PROPERTY_BASIC
	#define GIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR	//assumes GIA_CREATE_NON_SPECIFIC_SUBSTANCE_CONCEPTS_FOR_ALL_CONCEPTS is true (why is this required?)
	#ifdef GIA_INITIALISE_PREPOSITION_ENTITIES_AT_START_OF_TRANSLATOR
		#define GIA_SET_ENTITY_ENTITY_AND_SENTENCE_INDICIES_NORMALLY	//this is required for !GIA_TRANSLATOR_ONLY_MERGE_ENTITY_NODES_WHEN_LINK_PREESTABLISHED_REFERENCES_GIA
	#endif
#endif
#define GIA_TRANSLATOR_TRANSFORM_THE_ACTION_OF_BEING_EG_BEING_INTO_A_DEFINITION_BASIC

#ifdef USE_NLC
	#define GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS	//added 2i36a
	#ifdef GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS
		#define GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS_FILLER "_"	//this must be synced with NLC_PREPROCESSOR_REDUCE_QUOTES_TO_SINGLE_WORDS_FILLER
	#endif
#else
	//#define GIA_LRP_REDUCE_QUOTES_TO_SINGLE_WORDS	//GIA 2b4a	//disabled 2i36a
	#ifdef GIA_LRP_REDUCE_QUOTES_TO_SINGLE_WORDS
		#define GIA_LRP_REDUCE_QUOTES_TO_SINGLE_WORDS_FILLER "_"	//this filler does not appear compatible with Relex (Stanford only); try another filler character (NB "-" doesn't work with Relex either)
		#define GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS	//added 2i36a
		#ifdef GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS
			#define GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS_FILLER (GIA_LRP_REDUCE_QUOTES_TO_SINGLE_WORDS_FILLER)
		#endif
	#endif
#endif
#ifdef GIA_ASSUME_QUOTES_HAVE_BEEN_REDUCED_TO_SINGLE_WORDS
	#ifdef GIA_FEATURE_POS_TAG_NN_ONLY_MARK_AS_SINGULAR_WITH_DETERMINER
		#define GIA_FEATURE_POS_TAG_NN_ONLY_MARK_AS_SINGULAR_WITH_DETERMINER_OR_QUOTATIONS	//2i21a
	#endif
#endif

#define GIA_USE_CORPUS_DATABASE	//disabled for OpenGIA
#ifdef GIA_USE_CORPUS_DATABASE
	#define USE_GIA2		//GIA 2b1a - sets GIA into corpus read mode
	#ifdef USE_GIA2
		#define GIA2_SUPPORT_BOTH_FAST_CORPUS_LOOKUP_PATH_AND_SLOW_SYNTACTIC_RULE_BASED_PATH
		#ifdef GIA2_SUPPORT_BOTH_FAST_CORPUS_LOOKUP_PATH_AND_SLOW_SYNTACTIC_RULE_BASED_PATH
			#define GIA2_NON_HEURISTIC_IMPLEMENTATION_GENERATE_EXPERIENCES_FOR_CONNECTIONIST_NETWORK_TRAIN
		#else
			#define GIA2_DO_NOT_PARSE_DEPENDENCY_RELATION_FILE
			//#define GIA2_PARSE_PARTIALLY_FILLED_SEMANTIC_RELATIONS
		#endif
	#else
		//this compilation is for development purposes only:
		#define GIA2_NON_HEURISTIC_IMPLEMENTATION_GENERATE_EXPERIENCES_FOR_CONNECTIONIST_NETWORK_TRAIN
		#ifdef GIA2_NON_HEURISTIC_IMPLEMENTATION_GENERATE_EXPERIENCES_FOR_CONNECTIONIST_NETWORK_TRAIN
			//#define GIA_RECORD_LINK_PREESTABLISHED_REFERENCES_GIA
		#endif
		#define GIA_ADVANCED_REFERENCING_DISABLE_LINKING	//do not link references when generating semantic relation text corpus
	#endif
	#define GIA2_RECORD_DETERMINERS_AS_DEFINITE_INDEFINITE_SPECIFIC
	#define GIA2_SUPPORT_QUERIES
	#ifdef GIA2_SUPPORT_QUERIES
		//new implementation of GIA2_SUPPORT_QUERIES
		#define GIA2_SUPPORT_QUERIES_SPECIAL_SEMANTIC_RELATION_QVAR_AND_IS_QUERY_TAG_TAG_NAME "_$qVarisQuery"
		#define GIA2_SUPPORT_QUERIES_SPECIAL_SEMANTIC_RELATION_QVAR_AND_IS_NAME_QUERY_TAG_TAG_NAME "_$qVarisNameQuery"
		#define GIA2_SUPPORT_QUERIES_SPECIAL_SEMANTIC_RELATION_QVAR_AND_IS_WHICH_OR_EQUIVALENT_WHAT_QUERY_TAG_TAG_NAME "_$qVarisWhichOrEquivalentWhatQuery"
		#define GIA2_SUPPORT_QUERIES_SPECIAL_SEMANTIC_RELATION_IS_QUERY_TAG_TAG_NAME "isQuery"
		#define GIA2_SUPPORT_QUERIES_SPECIAL_SEMANTIC_RELATION_IS_NAME_QUERY_TAG_TAG_NAME "isNameQuery"
		#define GIA2_SUPPORT_QUERIES_SPECIAL_SEMANTIC_RELATION_IS_WHICH_OR_EQUIVALENT_WHAT_QUERY_TAG_TAG_NAME "isWhichOrEquivalentWhatQuery"
	#endif
	#define GIA2_CONNECTIONIST_NETWORK	//2d1a
	#ifdef GIA2_CONNECTIONIST_NETWORK
		#define GIA_RECORD_MAXIMUM_NUMBER_OF_WORDS_IN_SENTENCE	//NB maxNumberOfWordsInSentence is only currently used by GIA2
		#define GIA_CORPUS_DATABASE_FILESYSTEM_USE_FLAT_FILE	//temporarily enabled for debugging
		//#define GIA2_CONNECTIONIST_NETWORK_DEBUG		//temporary
		#define GIA2_CONNECTIONIST_NETWORK_MIN_SUBSET_SIZE (5)	//ie 5 words in subset is the minimimum
	#else
		#define GIA_CORPUS_DATABASE_FILESYSTEM_USE_FLAT_FILE
	#endif
	#ifdef GIA2_NON_HEURISTIC_IMPLEMENTATION_GENERATE_EXPERIENCES_FOR_CONNECTIONIST_NETWORK_TRAIN
		#define GIA2_SUPPORT_USE_RELEX_COMPATIBILITY_MODE_FOR_FEATURE_PARSER_TO_GENERATE_ADDITIONAL_RELATIONS_REQUIRED_BY_GIA2
	#elif defined GIA2_CONNECTIONIST_NETWORK
		#define GIA2_SUPPORT_USE_RELEX_COMPATIBILITY_MODE_FOR_FEATURE_PARSER_TO_GENERATE_ADDITIONAL_RELATIONS_REQUIRED_BY_GIA2	//this is required as semantic relations from multiple corpus files may be required to properly parse a sentence [if a single corpus file does not exist for the entire sentence]
	#endif
#endif

//#define GIA_RECORD_MAXIMUM_NUMBER_OF_WORDS_IN_SENTENCE_OR_MAX_FEATURE_INDEX	//added 2d1a (untested and unused but I think this is the more robust implementation)	//NB maxNumberOfWordsInSentence is only currently used by GIA2
#ifdef GIA_RECORD_MAXIMUM_NUMBER_OF_WORDS_IN_SENTENCE_OR_MAX_FEATURE_INDEX
	#define GIA_RECORD_MAXIMUM_NUMBER_OF_WORDS_IN_SENTENCE
	#define GIA_RECORD_MAX_FEATURE_INDEX
#endif

//variables currently being tested (3a4a+)
#define GIA_RELEX_FIX_DO_NOT_ASSIGN_DEFINITE_IF_UNCOUNTABLE

//variables currently being tested (2a1a+)
#define GIA_TRANSLATOR_SUPPORT_CSUB_AND_COP_GENERATE_ADJECTIVES

//variables currently being tested (1q1a+)
#define GIA_TRANSLATOR_DREAM_MODE_LINK_SPECIFIC_CONCEPTS_AND_ACTIONS	//required for NLC

#define GIA_QUERY_SIMPLIFIED_SEARCH
#define GIA_QUERY_SIMPLIFIED_SEARCH_REPLACE_ADVANCED_SEARCH
//#define GIA_QUERY_SIMPLIFIED_SEARCH_ENFORCE_EXACT_MATCH

//variables currently being tested (1t1a+)
#define GIA_TRANSLATOR_XML_INTERPRETATION
//#define GIA_TEMPORARY_COMPILATION_GCC_FLAG_E_PREPROCESS_TRANSLATOR_XML_FILES	//for use with compileGIAstopAfterPreprocessingXML.bat only: g++ -E GIAmain.cpp GIAparser.cpp GIAtranslator.cpp GIAtranslatorDefineGrammar.cpp GIAtranslatorDefineReferencing.cpp GIAtranslatorRedistributeRelationsStanford.xml GIAtranslatorRedistributeRelationsRelex.xml GIAtranslatorDefineSubstances.xml GIAtranslatorLinkEntities.xml GIAtranslatorApplyAdvancedFeatures.xml GIAtranslatorOperations.cpp GIAentityNodeClass.cpp GIAentityConnectionClass.cpp GIAconditionNodeClass.cpp GIAsentenceClass.cpp GIAdraw.cpp GIAxmlConversion.cpp GIAcxlConversion.cpp GIAquery.cpp GIAdatabase.cpp GIAnlp.cpp GIAwordnet.cpp GIAnlg.cpp GIAlrp.cpp GIAbot.cpp XMLparserClass.cpp XMLrulesClass.cpp LDsvg.cpp LDopengl.cpp LDparser.cpp LDsprite.cpp LDreferenceManipulation.cpp LDreferenceClass.cpp RToperations.cpp  RTparser.cpp  RTpixelMaps.cpp  RTppm.cpp  RTraytracer.cpp  RTreferenceManipulation.cpp  RTscene.cpp  RTviewinfo.cpp SHAREDglobalDefs.cpp SHAREDvector.cpp SHAREDvars.cpp
//#define GIA_DO_NOT_USE_UNTESTED_BUGFIX_REGARDING_grammaticalDefiniteIndexOfDeterminerTemp	//1t6b
#define GIA_SUPPORT_SPECIFIC_ACTION_CONCEPTS
#define GIA_WORKAROUND_RELEX_BUG_OCCASIONAL_QVAR_INDEX_SAME_AS_ANOTHER_RELATION_INDEX
#define GIA_WORKAROUND_RELEX_BUG_OCCASIONAL_QVAR_INDEX_SAME_AS_ANOTHER_RELATION_INDEX
#define GIA_USE_GENERIC_ENTITY_INTERPRETATION						//1t6b
#define GIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION
#ifdef GIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION
	#define GIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION_REDISTRIBUTION	//1t1a (tested 1ttd, tested with generalised link entity preparation generalised redistribution modifications 1t2m)
	#define GIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION_LINK			//1t2a (tested 1t3a)
	#define GIA_USE_GENERIC_DEPENDENCY_RELATION_INTERPRETATION_SUBSTANCES		//1t2b (tested 1t3a)
#endif
#define GIA_DEPENDENCY_RELATIONS_TYPE_RELEX_PARSE_QUESTIONS_IN_NON_QUERY_INPUTTEXT	//allows questions to be properly parsed during relation redistribution when they are added to inputText also (instead of just inputTextQuery)
//#define GIA_WARNINGS

//variables currently being tested (1s1a+)
#define GIA_STANFORD_CORE_NLP_VERSION_2013_04_04_OR_GREATER	//disable this if using previously tested version of Stanford CoreNLP (stanford-corenlp-2012-04-03)
#define GIA_TRANSLATOR_REDISTRIBUTE_RELATIONS_WORKAROUND_STANFORD_BUG_SINGLE_DIGIT_TIMES_MARKED_AS_ADJECTIVE
#define GIA_1S8D_LOW_PRI_RELEX_UPDATE_CHECK_THAT_IT_DOESNT_BREAK_STANFORD_OPTIMISATION_APPLY_FIX_TO_IS_NAME_QUERY_PROPOGATION
//#define GIA_1S3A_ADD_INTERPRETION_OF_IN_AS_POSSESSIVE_FOR_SUBSTANCES	//disabled in GIA 1s10d due to misinterpretation of "in" in "Apples are used for eating in the forest."


//variables currently being tested (1r1a+)

#define GIA_USE_BOT
#ifdef GIA_USE_BOT
	#define GIA_BOT_SWITCH_FIRST_AND_SECOND_PERSON	//Switch "you for I" (and vice versa)
#endif

#define GIA_QUERY_DO_NOT_SEARCH_DISABLED_NODES

#define GIA_TRANSLATOR_REDISTRIBUTE_STANFORD_RELATIONS_EXPLITIVES
#define GIA_TRANSLATOR_INTERPRET_CLAUSAL_COMPLEMENT_AS_ACTION_OBJECT_INSTEAD_OF_ACTION_PROPERTY	//added to bring Stanford back into line with Relex: eg He says that you like to swim / ccomp(say, like) -> obj(say, like), Moses knew I was angry. / ccomp(knew-2, angry-5) ->  obj(knew-2, angry-5

#define GIA_TRANSLATOR_INTERPRET_PRENOMINAL_MODIFIER_DEPENDENT_AS_SUBSTANCE_INSTEAD_OF_GOVERNOR	//interpret "toy"/"red" as property of "shop"/"dog" (originally "shop"/"dog" was interpreted as property of "toy"/"red")
#ifdef GIA_TRANSLATOR_INTERPRET_PRENOMINAL_MODIFIER_DEPENDENT_AS_SUBSTANCE_INSTEAD_OF_GOVERNOR
	#define GIA_TRANSLATOR_DEFINE_NOUNS_WITH_PRENOMINAL_MODIFIERS_AS_SUBSTANCES		//only enable this when "toy" is property of "shop" (ie do not enable this when "shop" is property of "toy")
#endif

//variables currently being tested (1q1a+)

#define GIA_SUPPORT_SPECIFIC_SUBSTANCE_CONCEPTS	//added 1q4a to take into account specific concepts eg 'red bears' as opposed to 'bears' //eg Red dogs are bad animals. / A blue chicken is a happy bird.
#ifdef GIA_SUPPORT_SPECIFIC_SUBSTANCE_CONCEPTS
	//#define GIA_SUPPORT_SPECIFIC_CONCEPTS_ASSIGN_TO_PROPERNOUNS	//added 1q10a [activated 1q10c] //removed 1t2d
	//#define GIA_SUPPORT_SPECIFIC_CONCEPTS_ASSIGN_TO_PRONOUNS	//added 1q10a [activated 1q10c]	//removed 1s8c	//check this does not undo advanced referencing/quering...
#endif
	//NB the phrase 'substance concept'/'substance quality' is a misnomer, as concepts and qualities are not really substances [NB concepts are considered secondary substances in Aristotle's categories, but GIA has a separate Entity class for concepts marked by isConcept: which is confusingly not being used in this case of 'specific concepts' - a software development/history artefact]" << endl;

#ifndef GIA_STORE_CONNECTION_SENTENCE_INDEX
	#define GIA_TRANSLATOR_PREVENT_DOUBLE_LINKS_ASSIGN_CONFIDENCES
#endif
#ifdef GIA_TRANSLATOR_PREVENT_DOUBLE_LINKS_ASSIGN_CONFIDENCES
	#define GIA_TRANSLATOR_PREVENT_DOUBLE_LINKS_ASSIGN_CONFIDENCES_PROPERTIES_AND_DEFINITIONS
	#define GIA_TRANSLATOR_PREVENT_DOUBLE_LINKS_ASSIGN_CONFIDENCES_ACTIONS_AND_CONDITIONS
#endif

//variables currently being tested (1p1a+)

#define STANFORD_CORENLP_DISABLE_INDEPENDENT_POS_TAGGER_WHEN_PARSING_DEPENDENCY_RELATIONS	//added 22 Sept to enable Stanford CoreNLP to be used to parse dependency relations with comparable (NOT: same) accuracy as stanford parser (ie when stanford CoreNLP is set as both relation and feature parser)
#ifndef GIA_DISABLE_2i_CODE_FOR_DEBUG
	#ifndef GIA_USE_CORPUS_DATABASE		//NB GIA2 doesn't support STANFORD_PARSER_USE_POS_TAGS (because the semantic relations word types being written must match those being read [and read can only use feature parser])
		#define STANFORD_PARSER_USE_POS_TAGS	//added 23 July 2012 to support Stanford Parser POS tags instead of Stanford CoreNLP POS tags (Stanford Parser POS tags are sometimes more accurate than Stanford CoreNLP POS tags)
	#endif
	#ifndef STANFORD_PARSER_USE_POS_TAGS
		#define STANFORD_CORENLP_POS_TAGS_BUG_GIA_WORKAROUND_SET_DETERMINER_DEPENDENT_TO_NOUN	//added 2i2b - eg "a human" in "A human is a player." should always be interpreted as a noun
	#endif	
#endif

#define GIA_APPLY_BUG_WORKAROUND_WHERE_A_CONCEPT_ENTITY_OF_INSTANCE_0_CAN_HAVE_NODE_DEFINING_INSTANCE
#define GIA_FREE_MEMORY
#ifdef GIA_FREE_MEMORY
	#define GIA_FREE_MEMORY1
	#define GIA_FREE_MEMORY2
	#define GIA_FREE_MEMORY3
#endif

#define GIA_SUPPORT_INPUT_FILE_LISTS
#define GIA_SUPPORT_INCONSISTENCY_BETWEEN_STANFORD_PARSER_AND_STANFORD_CORENLP_PARSING_OF_CONSECUTIVE_FULL_STOPS

//#define GIA_QUERIES_MUST_BE_QUESTIONS	//disabled 30 June 2012

#define GIA_USE_LRP
#ifdef GIA_USE_LRP
	#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS
	#ifdef GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS
		//#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CONSERVATIVE	//added 28 October 2012b - requires GIA_USE_LRP for reading of WikipediaIrregularVerbs.txt - this is used to normalise the tagging of continuous verbs (eg in the making of): it is not 100% successful as corrections are limited to irregular continous verbs (WikipediaIrregularVerbs.txt)
		#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_LIBERAL		//alternate implementation added 5 July 2013 - requires GIA_USE_LRP for reading of WordnetVerbs.txt - this is used to normalise the tagging of continuous verbs (eg in the making of)
		//#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_OLD_IMPLEMENTATION
		#ifndef GIA_DISABLE_2h_CODE_FOR_DEBUG
			#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CORRECT_POS_TAGS_EVEN_IF_LEMMAS_DETECTED_BY_NLP_PROGRESSIVE_CASE		//this is required for both STANFORD_PARSER_USE_POS_TAGS (because stanford tags some verbs eg delivering as noun) and STANFORD_CORENLP_POS_TAGS_BUG_GIA_WORKAROUND_SET_DETERMINER_DEPENDENT_TO_NOUN (because it overwrites verb/vbg determiners eg delivering as noun)
			//#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CORRECT_POS_TAGS_EVEN_IF_LEMMAS_DETECTED_BY_NLP		//this would require thorough testing before enabling (plus it is not required at present)
		#endif
	#endif
	#define GIA_USE_WORD_ORIG	//NB wordOrig is now used by more than just NLG (it is also used by LRP)
	//#define GIA_LRP_DISABLE_REDISTRIBUTE_RELATIONS_POST_NLP_MULTIWORD_PREPOSITION_REDUCTION
#endif

//variables currently being tested (1o1a+)

#ifdef USE_CE
	#define GIA_WITH_CE_CONVERT_PUNCTUATION_MARK_CHARACTERS_TO_FULL_STOPS
	#ifdef GIA_WITH_CE_CONVERT_PUNCTUATION_MARK_CHARACTERS_TO_FULL_STOPS
		#define GIA_NLP_MAXIMUM_NUMBER_WORDS_PER_SENTENCE_THAT_NLP_CAN_PARSE_DUE_TO_3GB_MEMORY_LIMITATION (150)
		#define GIA_WITH_CE_MINIMUM_NUMBER_WORDS_BEFORE_CONVERTING_PUNCTUATION_MARKS_TO_FULL_STOPS (GIA_NLP_MAXIMUM_NUMBER_WORDS_PER_SENTENCE_THAT_NLP_CAN_PARSE_DUE_TO_3GB_MEMORY_LIMITATION/2)
		#define GIA_WITH_CE_CONVERT_PUNCTUATION_MARK_CHARACTERS_TO_FULL_STOPS_BIAS_REPLACEMENT_TOWARDS_END_OF_CODEEXTENSION_BASED_ON_EXPECTED_GREATED_DISTANCE_BETWEEN_PUNCTUATION_MARKS
	#endif
	#define GIA_WITH_CE_USE_CODEEXTENSION_HEIRACHY
	#define GIA_WITH_CE_DERIVE_SCODEEXTENSION_PREPEND
	//#define GIA_WITH_CE_USE_ALL_CODEEXTENSION_COMBINATIONS	//else just use first
	//#define GIA_WITH_CE_DEBUG
#endif

#define GIA_SUPPORT_ALIASES
#ifdef GIA_SUPPORT_ALIASES
	#define GIA_SUPPORT_MORE_THAN_ONE_NODE_DEFINING_AN_INSTANCE	//NB this is required for advanced referencing to work properly with specific cases of aliasing eg; The name of the red dog is Tom. Tom ate a bone near the house.
	#define GIA_SUPPORT_ALIASES_RELEX_COMPATIBILITY
#endif
#define GIA_TEMPORARILY_DISABLE_GIA_XML_READ_CHECKS

#define GIA_USE_NLG
#ifdef GIA_USE_NLG
	#define GIA_USE_NLG_OUTPUT_TO_COMMAND_LINE
	//#define GIA_USE_NLG2
	#ifdef GIA_USE_NLG2
		#define GIA_NLG_DEBUG_MANUALLY_HARDCODE_INTO_NLG2
	#endif
	#define GIA_USE_NLG_NO_MORPHOLOGY_GENERATOR	//NB even NLG2 requires origWord not lemma, so a morphology generator is required in both
	#define GIA_USE_WORD_ORIG	//NB wordOrig is now used by more than just NLG (it is also used by LRP)	
#endif

//variables currently being tested (1n1a+)

#define GIA_USE_1N1ATEMP1TO8_CHANGES	//added 1n1aTEMP9

#define GIA_USE_DATABASE	//requires further testing
#ifdef GIA_USE_DATABASE
	#define GIA_DATABASE_TEST_MODE_LOAD_ALL_ENTITIES_AND_CONNECTIONS_TO_ACTIVE_LIST_UPON_READ	//enable this for debugging only - not required for GIA
	#define GIA_DATABASE_DO_NOT_WRITE_DISABLED_ENTITY_NODES	//added 29 Nov 2012
	#ifdef GIA_DATABASE_DO_NOT_WRITE_DISABLED_ENTITY_NODES
		#define GIA_DATABASE_DO_NOT_WRITE_CONNECTIONS_TO_DISABLED_ENTITY_NODES	//added 29 Nov 2012
	#else
		//#define GIA_DATABASE_DO_NOT_WRITE_CONNECTIONS_TO_DISABLED_ENTITY_NODES	//optional to enable disbled node i/o without recording their connections
		//#define GIA_DATABASE_DO_NOT_WRITE_CONNECTIONS_FROM_DISABLED_ENTITY_NODES	//optional to enable disbled node i/o without recording their connections
	#endif
	#define GIA_USE_DATABASE_FILESYSTEM
	//#define GIA_USE_DATABASE_ALWAYS_LOAD_CONCEPT_NODE_REFERENCE_LISTS
	#define GIA_DATABASE_CLEAR_CACHE_EVERY_SENTENCE
#endif

#define GIA_SEMANTIC_NET_DO_NOT_WRITE_DISABLED_ENTITY_NODES	//added 29 Nov 2012 (this cannot be used at present as <entityNode> idActiveList values must be consecutive in xml file)
#ifdef GIA_SEMANTIC_NET_DO_NOT_WRITE_DISABLED_ENTITY_NODES
	#define GIA_SEMANTIC_NET_DO_NOT_WRITE_CONNECTIONS_TO_DISABLED_ENTITY_NODES	//added 29 Nov 2012
#else
	//#define GIA_SEMANTIC_NET_DO_NOT_WRITE_CONNECTIONS_TO_DISABLED_ENTITY_NODES	//optional to enable disbled node i/o without recording their connections
	//#define GIA_SEMANTIC_NET_DO_NOT_WRITE_CONNECTIONS_FROM_DISABLED_ENTITY_NODES	//optional to enable disbled node i/o without recording their connections
#endif

#define GIA_RECORD_SAME_REFERENCE_SET_INFORMATION	//separated from GIA_USE_ADVANCED_REFERENCING 2g5a/05 September 2014	//added 2g5a - required for advanced referencing, dream mode (identifyReferenceSetsSpecificConceptsAndLinkWithSubstanceConcepts{}:identifyReferenceSetDetermineNextCourseOfAction{}:identifyReferenceSet()), and NLC 1j2b+
#ifndef GIA_DISABLE_CROSS_SENTENCE_REFERENCING
	#define GIA_USE_ADVANCED_REFERENCING
#endif
#ifdef GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING_ONLY
	#define GIA_USE_ADVANCED_REFERENCING
#endif
#ifdef GIA_USE_ADVANCED_REFERENCING
	#define GIA_TRANSLATOR_MARK_DOUBLE_LINKS_AS_REFERENCE_CONNECTIONS	//added 2f21a/20-August-2014 - required for NLC 1i2a+, disabled NLC for 1j2b+, optional for NLC 1k11a+
	#define GIA_RECORD_WAS_REFERENCE_INFORMATION
	#ifndef GIA_STORE_CONNECTION_SENTENCE_INDEX
		#define GIA_ADVANCED_REFERENCING_PREVENT_DOUBLE_LINKS
	#endif
	#ifdef USE_NLC	
		#ifdef GIA_DISABLE_CROSS_SENTENCE_REFERENCING	//ie #ifndef GIA_ENABLE_SUBSTANCE_CONCEPT_ADVANCED_REFERENCING_ONLY. Note NLC does not require intrasentence referencing when NLC_USE_ADVANCED_REFERENCING is enabled (ie )
			#define GIA_ADVANCED_REFERENCING_SUPPORT_INTRASENTENCE_REFERENCING
		#endif	
	#else
		#define GIA_ADVANCED_REFERENCING_SUPPORT_INTRASENTENCE_REFERENCING
	#endif
	#define GIA_ADVANCED_REFERENCING_DO_NOT_REAPPLY_IS_SUBSTANCE_CONCEPT_TO_REFERENCES
#else
	//#define GIA_USE_NON_ADVANCED_REFERENCING
#endif


#ifdef GIA_RECORD_SAME_REFERENCE_SET_INFORMATION	
	#define GIA_IDENTIFY_REFERENCE_SET_CONCEPT_ENTITY_ENTRANCE_DO_NOT_ENTER_ON_AN_ACTION_NODE	//GIA 2a8a	//this update is required for NLC if statement parsing //this update enforces orginal GIA specification: '//an action is considered by default not to be part of the same reference set as its subject/object (eg "the man fires the bow"). An rcmod /"that" is explicitly required for an action to be considered part of the same reference set as its subject/object (eg "the man that fires the bow...")'
	#define GIA_USE_ADVANCED_REFERENCING_IDENTIFY_DEFINITE_SETS_ONLY	//this is required considering reference look up of non definite sets is never desired
	#ifdef GIA_USE_ADVANCED_REFERENCING_IDENTIFY_DEFINITE_SETS_ONLY
		//#define GIA_USE_ADVANCED_REFERENCING_IDENTIFY_SETS_WITH_SUBJECT_OR_OBJECT_ONLY	//removed 12 August 2012 (NB original isObjectTemp/isSubjectTemp values are not retained currently - especially after advanced referencing update [GIA1n] - only derived isObjectTemp/isSubjectTemp values are retained [where as original values are left inside GIAfeatureTempEntityNodeArray], which do not include subjects/objects not involved in actions - eg property relationships as opposed to action relationships)
		#define GIA_USE_ADVANCED_REFERENCING_IDENTIFY_DEFINITE_SETS_ACCEPT_PROPERNOUNS 	//added 12 August 2012
	#endif
	//#define GIA_ADVANCED_REFERENCING_FIND_SUBJ_OBJ_RELATION_MATCHING_AUXILIARY_AND_SET_NOT_SAME_REFERENCE_SET
	#define GIA_USE_ADVANCED_REFERENCING_SEARCH_CODE
	#ifdef GIA_USE_ADVANCED_REFERENCING_SEARCH_CODE
		#define GIA_ADVANCED_REFERENCING_ORIGINAL
		//#define GIA_ADVANCED_REFERENCING_UPDATE_NOT_NECESSARY_OR_TESTED
		#define GIA_ADVANCED_REFERENCING_ENSURE_PLURALITY_MATCHES	//added 29 June 2013
	#endif
	#define GIA_ADVANCED_REFERENCING_PREPOSITIONS
	#define GIA_ADVANCED_REFERENCING_CONDITIONS		//all conditions; ie, not just preposition conditions
	#define GIA_ADVANCED_REFERENCING_CONDITIONS_RELEX_SPECIFIC - added 2 July 2013 (requires testing)
	
	#define GIA_ADVANCED_REFERENCING_ASSERT_MINIMUM_SENTENCE_INDEX_OF_REFERENCE_SET	//added 1m5aTEMP11 [requires Stanford Parser - incompatible with Relex - because it requires record of the sentence entity index of the determiner "the"; grammaticalIndexOfDeterminer/grammaticalIndexOfDeterminerTemp]
#endif

#define GIA_ENABLE_TEXTUAL_CONTEXT_REFERENCING			//default: on	//this enables pronoun detection	//OLD: {this needs to disable some additional parameters also... (NB substances are still being connected, and not created anew)}
#ifdef GIA_ENABLE_TEXTUAL_CONTEXT_REFERENCING
	#ifdef GIA_USE_ADVANCED_REFERENCING
		#define GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES		//default: on
		#ifdef GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES
			#define GIA_STANFORD_CORE_NLP_CODEPENDENCIES_ONLY_USE_PRONOMINAL_COREFERENCE_RESOLUTION		//if using advanced referencing, only use the pronominal coreferences from Stanford (it, she, he, etc) [not optional]
		#endif
	#else
		#ifdef GIA_USE_NON_ADVANCED_REFERENCING		
			#define GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES	//default: on
			#ifdef GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES
				//#define GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES_ALL	//Not fully tested, but appears to work at least in simple scenarios
				#ifndef GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES_ALL
					#define GIA_STANFORD_CORE_NLP_CODEPENDENCIES_ONLY_USE_PRONOMINAL_COREFERENCE_RESOLUTION		//if using non-advanced referencing, only use pronominal coreferences from Stanford (it, she, he, etc) [optional]
					#ifdef GIA_STANFORD_CORE_NLP_CODEPENDENCIES_ONLY_USE_PRONOMINAL_COREFERENCE_RESOLUTION
						#define GIA_IMPLEMENT_NON_STANFORD_CORE_NLP_CODEPENDENCIES_CROSS_SENTENCE_REFERENCING
					#endif
				#endif
			#else
				#define GIA_IMPLEMENT_NON_STANFORD_CORE_NLP_CODEPENDENCIES_CROSS_SENTENCE_REFERENCING
			#endif
			#ifdef GIA_IMPLEMENT_NON_STANFORD_CORE_NLP_CODEPENDENCIES_CROSS_SENTENCE_REFERENCING
				#define GIA_ENABLE_REFERENCE_LINKING_DO_NOT_USE_IF_REFERENCE_IS_NOT_DEFINITE_OR_PROPER_NOUN		/*to prevent the ambiguous blue chicken(s) being linked; eg A blue chicken is small. / A red chicken is fat. / The green chicken ate the pie. / A blue chicken is late.*/
			#endif
		#else
			#define GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES		//default: on
			#ifdef GIA_STANFORD_CORE_NLP_USE_CODEPENDENCIES
				#define GIA_STANFORD_CORE_NLP_CODEPENDENCIES_ONLY_USE_PRONOMINAL_COREFERENCE_RESOLUTION		//if not using referencing, only use the pronominal coreferences from Stanford (it, she, he, etc) [not optional]
			#endif		
		#endif
	#endif
#endif

//variables currently under attention for testing purposes

#define WORDNET_SEARCH_RELATED_SYNSETS
#define GIA_ASSIGN_SUBSTANCE_TO_PROPER_NOUNS		//this was (effectively) disabled before version 1h3b 	//NB used to be called 'GIA_DO_NOT_ASSIGN_SUBSTANCE_TO_PROPER_NOUNS'
#define GIA_OUTPUT_INTERNAL_RELATIONS_IN_RELEX_FORMAT
//#define GIA_STANFORD_DO_NOT_USE_UNTESTED_RELEX_OPTIMISATION_CODE2
/*#define GIA_USE_ORIGINAL_PRONOMINAL_COREFERENCE_RESOLUTION_IGNORE_SUBSTANCES_TAKE_CONCEPTS_ONLY	//untested (removed 1l1c)*/	//commented out completely
#define GIA_ID_INSTANCE_ALLOW_INSTANCE_DELETIONS
#define GIA_USE_ADVANCED_REFERENCING_FIND_ALL_RELATIONS_MATCHING_AUXILIARY_AND_SET_DIFFERENT_REFERENCE_SET

#ifndef GIA_STANFORD_CORE_NLP_VERSION_2013_04_04_OR_GREATER
	#define GIA_STANFORD_CORE_NLP_COMPENSATE_FOR_PROPERNOUN_LEMMA_CASE_ASSIGNMENT_BUG_GENERATE_STRANGE_LEMMA
	#ifdef GIA_STANFORD_CORE_NLP_COMPENSATE_FOR_PROPERNOUN_LEMMA_CASE_ASSIGNMENT_BUG_GENERATE_STRANGE_LEMMA
		#define GIA_STANFORD_CORE_NLP_COMPENSATE_FOR_PROPERNOUN_LEMMA_CASE_ASSIGNMENT_BUG_USE_ORIGINAL_WORD
	#endif
	#define GIA_STANFORD_CORE_NLP_COMPENSATE_FOR_PROPERNOUN_ASSIGNMENT_BUG_USE_NER_VALUES	//CHECKTHIS; does this need to be reinstated for GIA_STANFORD_CORE_NLP_VERSION_2013_04_04_OR_GREATER?
#endif
#define GIA_STANFORD_CORE_NLP_COMPENSATE_FOR_PROPERNOUN_LEMMA_CASE_ASSIGNMENT_BUG_MAKE_ALL_LEMMAS_LOWER_CASE	//used to resolve the issue where 'time'/'freedom' and 'Time'/'Freedom' are not matched etc

//variables passed testing:
#define GIA_STANFORD_DO_NOT_USE_UNTESTED_RELEX_OPTIMISATION_CODE
#define GIA_STANFORD_DO_NOT_USE_UNTESTED_RELEX_OPTIMISATION_CODE_THAT_IS_PROBABLY_STANFORD_COMPATIBLE
//#define GIA_TRIAL_WORD_NET_SYNONYM_LOOKUP

//Debug [Disable these for official build];
//#define GIA_ADVANCED_REFERENCING_DEBUG_SIMPLE2
#ifdef USE_NLC
	#define GIA_INSTANCE_OR_REFERENCE_SET_ID_DEBUG
#endif

//#define GIA_CORPUS_TRANSLATOR_DEBUG
//#define GIA_LRP_NORMALISE_INVERSE_PREPOSITIONS_DEBUG
//#define GIA_DREAMMODE_REFERENCING_DEBUG
//#define GIA_ADVANCED_REFERENCING_DEBUG_SIMPLE
//#define GIA_TRANSLATOR_XML_INTERPRETATION_DEBUG
//#define GIA_GENERIC_DEPENDENCY_RELATION_INTERPRETATION_DEBUG
//#define GIA_TRANSLATOR_DEFINE_SUBSTANCES_DEBUG
//#define GIA_LRP_DEBUG
//#define GIA_NLG_DEBUG
//#define GIA_ADVANCED_REFERENCING_DEBUG_TOO_LARGE_REFERENCE_SET
//#define GIA_ALIASES_DEBUG
//#define GIA_ADVANCED_REFERENCING_DEBUG_INTRASENTENCE_EXTRA
//#define GIA_ADVANCED_REFERENCING_DEBUG  	//finished first debug using this (1l5f)
//#define GIA_QUERY_DEBUG
//#define GIA_QUERY_MULTIPLE_ANSWERS_DEBUG      //finished first debug using this (1l2a)
//#define GIA_STANFORD_CORENLP_CODEPENDENCY_PRONOMINAL_REFERENCING_DEBUG
//#define GIA_DATABASE_DEBUG_FILESYSTEM_IO
//#define GIA_DATABASE_DEBUG		//this needs to be debugged (not yet tested)
//#define GIA_REDISTRIBUTE_STANFORD_RELATIONS_QUERY_VARIABLE_DEBUG
//#define GIA_REDISTRIBUTE_STANFORD_RELATIONS_QUERY_VARIABLE_DEBUG_DO_NOT_MAKE_FINAL_CHANGES_YET
//#define GIA_OUTPUT_INTERNAL_RELATIONS_IN_RELEX_FORMAT_DEBUG
//#define GIA_WORDNET_DEBUG
//#define GIA_STANFORD_DEPENDENCY_RELATIONS_DEBUG2
//#define GIA_STANFORD_DEPENDENCY_RELATIONS_DEBUG
//#define GIA_TRANSLATOR_DEBUG
//#define GIA_NLP_DEBUG
//#define GIA_DRAW_DEBUG
//#define GIA_SEMANTIC_NET_XML_DEBUG
//#define GIA_SEMANTIC_NET_CXL_DEBUG
//#define GIA_FREE_MEMORY_DEBUG
//#define GIA_MAIN_DEBUG
//#define GIA_PRONOUN_REFERENCING_DEBUG


#define GIA_ADVANCED_REFERENCING_DEBUG_HIGHLIGHT_REFERENCE_SET_CONNECTIONS_WITH_COLOURS
//#define GIA_ADVANCED_REFERENCING_DEBUG_HIGHLIGHT_REFERENCE_SET_NODES_WITH_COLOURS
#ifdef GIA_ADVANCED_REFERENCING_DEBUG_HIGHLIGHT_REFERENCE_SET_NODES_WITH_COLOURS
	//#define GIA_ADVANCED_REFERENCING_DEBUG_HIGHLIGHT_REFERENCE_SET_NODES_WITH_COLOURS_WORK_WITH_MULTIPLE_SENTENCES
#endif
//#define GIA_ADVANCED_REFERENCING_DISABLE_LINKING


//DebugOLD;
//#define GIA_WORDNET_DEBUG_OUTPUT_SYNONYMNS	//Do not enable else will prematurely exit


//Wordnet
#define USE_WORDNET	(takes into account synonymns)
#ifdef USE_WORDNET
	#define GIA_USE_SYNONYMN_DETECTION
#endif


//~External NLP Parser
#define GIA_USE_RELEX
#define GIA_USE_STANFORD_CORENLP
#define GIA_USE_STANFORD_PARSER
#ifdef GIA_USE_RELEX
	//#define GIA_USE_RELEX_IN_STANFORD_COMPATIBILITY_MODE	//untested - not implemented
	#ifdef GIA_USE_RELEX_IN_STANFORD_COMPATIBILITY_MODE
		#define GIA_USE_STANFORD_DEPENDENCY_RELATIONS
	#endif
	#ifdef LINUX
		#define GIA_RELEX_EXECUTABLE_NAME "execute-relex.sh"
		#define GIA_RELEX_WITH_STANFORD_COMPATIBILITY_MODE_EXECUTABLE_NAME "execute-relex-withStanfordCompatibilityMode.sh"
	#else
		#define GIA_RELEX_EXECUTABLE_NAME "execute-relex.bat"
		#define GIA_RELEX_WITH_STANFORD_COMPATIBILITY_MODE_EXECUTABLE_NAME "execute-relex-withStanfordCompatibilityMode.bat"
	#endif
	#define GIA_USE_RELEX_1_4_0	//default: enabled (otherwise use Relex 1.3.0)
	#ifdef GIA_USE_RELEX_1_4_0
		//#define GIA_USE_RELEX_UPDATE_ADD_PARAGRAPH_TAGS		//BAI paragraph tag support has not yet been added to Relex 1.3.0	//NB GIA no longer works with BAI Relex <paragraph> tag upgrade - as sentence ID is now used for a variety of purposes (without paragraph id): therefore will need to determine a new method of establishing intra paragraph referencing.
	#endif
#endif
#ifdef GIA_USE_STANFORD_CORENLP		//a more advanced implementation of stanford parser (with lemma, entity name detection, etc: Stanford CoreNLP integrates all our NLP tools for the English language, including the part-of-speech (stanfordPOS) tagger, the named entity recognizer (NER), the parser, and the coreference resolution system)
	#define GIA_USE_STANFORD_DEPENDENCY_RELATIONS
	#ifdef LINUX
		#define GIA_STANFORD_NLP_EXECUTABLE_NAME "execute-stanfordCoreNLP.sh"
		#define GIA_STANFORD_NLP_EXECUTABLE_NAME_WITHOUT_INDEPENDENT_POS_TAGGER "execute-stanfordCoreNLPwithoutPT.sh"
	#else
		#define GIA_STANFORD_NLP_EXECUTABLE_NAME "execute-stanfordCoreNLP.bat"
		#define GIA_STANFORD_NLP_EXECUTABLE_NAME_WITHOUT_INDEPENDENT_POS_TAGGER "execute-stanfordCoreNLPwithoutPT.bat"
	#endif
#endif
#ifdef GIA_USE_STANFORD_PARSER
	#define GIA_USE_STANFORD_DEPENDENCY_RELATIONS
	#ifdef LINUX
		#define GIA_STANFORD_PARSER_EXECUTABLE_NAME "execute-stanfordParser.sh"
	#else
		#define GIA_STANFORD_PARSER_EXECUTABLE_NAME "execute-stanfordParser.bat"
	#endif
#endif
#define GIA_NLP_PARSER_RELEX (0)
#define GIA_NLP_PARSER_STANFORD_CORENLP (1)
#define GIA_NLP_PARSER_STANFORD_PARSER (2)
#define GIA_NLP_PARSER_NUMBER_OF_TYPES (3)
#define GIA_NLP_FEATURE_PARSER_FOR_INPUT_TEXT_DEFAULT (GIA_NLP_PARSER_STANFORD_CORENLP)
#define GIA_NLP_RELATIONS_PARSER_FOR_INPUT_TEXT_DEFAULT (GIA_NLP_PARSER_STANFORD_PARSER)	//NB GIA_NLP_PARSER_STANFORD_CORENLP will be default in future, once it works better than GIA_NLP_PARSER_STANFORD_PARSER.
#define GIA_NLP_FEATURE_PARSER_FOR_INPUT_QUERY_DEFAULT (GIA_NLP_PARSER_RELEX)
#define GIA_NLP_RELATIONS_PARSER_FOR_INPUT_QUERY_DEFAULT (GIA_NLP_PARSER_RELEX)
#define GIA_DEPENDENCY_RELATIONS_TYPE_RELEX (0)
#define GIA_DEPENDENCY_RELATIONS_TYPE_STANFORD (1)
#define GIA_DEPENDENCY_RELATIONS_NUMBER_OF_TYPES (2)		//Relex and Stanford tags
#define GIA_NLP_DEPENDENCY_RELATIONS_PARSER_RELEX_DEFAULT_DEPENDENCY_RELATIONS_TYPE (GIA_DEPENDENCY_RELATIONS_TYPE_RELEX)
#define GIA_NLP_DEPENDENCY_RELATIONS_PARSER_STANFORD_CORENLP_DEFAULT_DEPENDENCY_RELATIONS_TYPE (GIA_DEPENDENCY_RELATIONS_TYPE_STANFORD)
#define GIA_NLP_DEPENDENCY_RELATIONS_PARSER_STANFORD_PARSER_DEFAULT_DEPENDENCY_RELATIONS_TYPE (GIA_DEPENDENCY_RELATIONS_TYPE_STANFORD)

#define GIA_NLP_PARSER_TYPE_RELATIONS (0)
#define GIA_NLP_PARSER_TYPE_FEATURES (1)

//~GIAtranslator
#define GIA_USE_CONCEPT_ENTITY_NODE_MAP_NOT_VECTOR	//this is required (the current set of code has had the alternative case removed - see GIAtranslator.cpp.copyWithDataStructureOptions for an example set of code that supports disabling this feature)
#define REFERENCE_TYPE_QUESTION_COMPARISON_VARIABLE "_$qVar"
#define REFERENCE_TYPE_QUESTION_COMPARISON_VARIABLE_LENGTH (6)
#define GIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY
#define GIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY_ADVANCED	//this is now MANDATORY
#ifdef GIA_TRANSLATOR_COMPENSATE_FOR_SWITCH_OBJ_SUB_DEFINITION_QUESTIONS_ANOMALY_ADVANCED
	#define GIA_PERFORM_RELATION_GOVERNOR_ARGUMENT_SWITCHING_WHERE_NECESSARY	//this was changed 27 July 2013
	#define GIA_PERFORM_RELATION_GOVERNOR_ARGUMENT_SWITCHING_ONLY_WHEN_REQUIRED	//this was changed 27 July 2013
#else
	#define GIA_PERFORM_RELATION_GOVERNOR_ARGUMENT_SWITCHING_WHERE_NECESSARY
	#define GIA_PERFORM_RELATION_GOVERNOR_ARGUMENT_SWITCHING_ONLY_WHEN_REQUIRED
#endif

//~GIAmain
//#define GIA_DO_NOT_PRINT_RESULTS

//~GIAquery
#define GIA_QUERY_DOUBLE_ERROR (0.0001)
#define GIA_QUERY_CONFIDENCE_MULTIPLIER (10)
	//these preprocessor have been moved to GIAglobalsDefs.h as they are used in both GIAtranslator.cpp and GIAquery.cpp
#define GIA_SUPPORT_COMPARISON_VARIABLE_DEFINITION_VIA_ALTERNATE_METHOD_EG_SUPPORT_WHICH_QUERIES
#ifdef GIA_SUPPORT_COMPARISON_VARIABLE_DEFINITION_VIA_ALTERNATE_METHOD_EG_SUPPORT_WHICH_QUERIES
	#define GIA_SUPPORT_COMPARISON_VARIABLE_DEFINITION_VIA_ALTERNATE_METHOD_EG_SUPPORT_WHICH_QUERIES_ADVANCED	//allows for verification that answer node is of type identified by the which query eg verifies that the answer 'dog' [from text: 'the dog eats the mud. dogs are animals.'], is an animal with the query: 'which animal eats the mud?'
#endif



//~GIAdraw
//#define GIA_DRAW_USE_PATENT			//modifies colours of nodes such that they print uniquely in black and white
//#define GIA_CMAP_CONVERSION_SANITISED 	//use format akin to Cmap Tools / not GIA formatted. linking-phrase-list -> actions + conditions. concept-list -> concepts or substances
#define GIA_DRAW_DISPLAY_ANSWER_CONTEXTS
#define GIA_DRAW_PRINT_ENTITY_NODES_IN_ORDER_OF_SENTENCE_INDEX
#ifdef GIA_DRAW_PRINT_ENTITY_NODES_IN_ORDER_OF_SENTENCE_INDEX
	#define GIA_DRAW_PRINT_ENTITY_NODES_IN_ORDER_OF_SENTENCE_INDEX_ADVANCED		//more robust implementation (should activate when using GIA_USE_DATABASE to ensure all the semantic network connections are visible)
#endif
//#define GIA_DRAW_PRINT_CONNECTION_SENTENCE_INDICES

#endif
